# Modul

Anda sudah lihat bagaimana Anda dapat menggunakan kembali kode di dalam program dengan membuat fungsi sekali saja. Bagaimana jika ingin menggunakan beberapa fungsi di program lain yang Anda tulis. Sebagaimana sudah ditebak, jawabannya adalah modul. 

Ada beberapa metode dalam menulis modul, tapi cara yang paling mudah adalah membuat file dengan ekstensi `.py` yang berisi fungsi dan variabel. 

Metode lain untuk menulis modul adalah dengan menulis modul di bahasa ibu di mana interpreter Python ditulis. Sebagai contoh, Anda dapat menulis modul di [bahasa pemrograman C](http://docs.python.org/py3k/extending/index.html) dan saat selesai dikompilasi, modul tersebut dapat digunakan dalam kode Python Anda dengan menggunakan interpreter Python standar.

Sebuah modul dapat *diimpor* oleh program lain dan menggunakan fungsinya. Cara ini juga kita pakai dalam memanfaatkan pustaka standar Python. Pertama, akan kita lihat dulu bagaimana menggunakan modul pustaka standar. 

Contoh (simpan dengan nama `pakai_sys.py`):

~~~python
import sys

print('Argumen baris perintahnya adalah:')
for i in sys.argv:
    print(i)

print('\n\n PYTHONPATH yang ditentukan adalah ', sys.path, '\n')
~~~

Keluaran:

~~~
$ python3 pakai_sys.py ini argumen kami
Argumen baris perintahnya adalah:
pakai_sys.py
ini
argumen
kami

PYTHONPATH yang ditentukan adalah [<nowiki>''</nowiki>, 'C:\\Windows\\system32\\python30.zip',
'C:\\Python30\\DLLs', 'C:\\Python30\\lib',
'C:\\Python30\\lib\\plat-win', 'C:\\Python30', 
'C:\\Python30\\lib\\site-packages']
~~~

Bagaimana Cara Kerjanya:

Pertama, kita melakukan *import* modul `sys` lewat statemen `import`. Pada dasarnya, ini bisa diterjemahkan sebagai keinginan kita kepada Python bahwa kita ingin menggunakan modul ini. Modul `sys` berisi fungsi yang berkaitan dengan interpreter Python dan lingkungannya, antara lain *sys*tem. 

Saat Python mengeksekusi statemen `import sys`, dia akan mencari modul `sys`. Dalam hal ini, modul tersebut merupakan modul built-in, sehingga Python langsung tahu di mana mencarinya. 

Jika modul yang diinginkan bukan modul terkompilasi, atau modul yang ditulis di Python, maka interpreter Python akan mencari direktori yang terdaftar dalam variabel `sys.path`. Jika modul ditemukan, maka isi modul tersebut dijalankan dan modul akan *tersedia* untuk Anda gunakan. Catat bahwa inisialisasi dilakukan saat *pertama* kali kita mengimpor modul.

Variabel `argv` di dalam modul `sys` akan diakses dengan notasi titik, misal `sys.argv`. Ini secara jelas mengindikasikan bahwa nama tersebut merupakan bagian dari modul `sys`. Keuntungan lain dari pendekatan ini adalah bahwa nama fungsi tersebut tidak akan bentrok dengan variabel `argv` yang digunakan di dalam program Anda. 

Variabel `sys.argv` berisi *list* string (lists dijelaskan lebih detail di [bab berikutnya](#struktur-data)). Secara lebih khusus `sys.argv` berisi list dari seluruh *argumen baris perinta* yakni seluruh argumen yang dituliskan pada program Anda saat menjalankannya di baris perintah. 

Jika Anda menggunakan IDE untuk menulis dan menjalankan program ini, cari cara untuk menambahkan argumen program dari menu. 

Di sini, ketika kita mengeksekusi `python pakai_sys ini argumen kami`, kita menjalankan modul `pakai_sys.py` lewat perintah `python` dan kata-kata yang ditulis setelahnya adalah argumen yang dilemparkan ke dalam program. Python menyimpan baris argumen di variabel `sys.argv` untuk dapat kita manfaaatkan. 

Ingat, nama dari skrip yang dijalankan akan selalu menjadi argumen pertama dalam list `sys.argv`. Sehingga dalam kasus ini `'pakai_sys.py'` sebagai `sys.argv[0]`, `'ini'` sebagai `sys.argv[1]`, `'argumen'` sebagai `sys.argv[2]` dan `'kami'` sebagai `sys.argv[3]`. Perhatikan bahwa Python menghitung dari 0, dan bukan 1. 

The `sys.path` contains the list of directory names where modules are imported from. Observe that the first string in `sys.path` is empty - this empty string indicates that the current directory is also part of the `sys.path` which is same as the `PYTHONPATH` environment variable. This means that you can directly import modules located in the current directory. Otherwise, you will have to place your module in one of the directories listed in `sys.path`.

Note that the current directory is the directory from which the program is launched. Run `import os; print(os.getcwd())` to find out the current directory of your program.

## Byte-compiled .pyc files 

Importing a module is a relatively costly affair, so Python does some tricks to make it faster. One way is to create *byte-compiled* files with the extension `.pyc` which is an intermediate form that Python transforms the program into (remember the [introduction section](#introduction) on how Python works?). This `.pyc` file is useful when you import the module the next time from a different program - it will be much faster since a portion of the processing required in importing a module is already done. Also, these byte-compiled files are platform-independent.

Note

:   These `.pyc` files are usually created in the same directory as the corresponding `.py` files. If Python does not have permission to write to files in that directory, then the `.pyc` files will not be created.

## The from ... import statement 

If you want to directly import the `argv` variable into your program (to avoid typing the `sys.` everytime for it), then you can use the `from sys import argv` statement.

In general, you *should avoid* using this statement and use the `import` statement instead since your program will avoid name clashes and will be more readable.

Example:

~~~python
from math import sqrt
print("Square root of 16 is", sqrt(16))
~~~

## A module's __name__ 

Every module has a name and statements in a module can find out the name of their module. This is handy for the particular purpose of figuring out whether the module is being run standalone or being imported. As mentioned previously, when a module is imported for the first time, the code it contains gets executed. We can use this to make the module behave in different ways depending on whether it is being used by itself or being imported from another module. This can be achieved using the `__name__` attribute of the module.

Example (save as `using_name.py`):

~~~python
if __name__ == '__main__':
    print('This program is being run by itself')
else:
    print('I am being imported from another module')
~~~

Output:

~~~
$ python3 using_name.py
This program is being run by itself

$ python3
>>> import using_name
I am being imported from another module
>>>
~~~

How It Works:

Every Python module has its `__name__` defined. If this is `'__main__'`, that implies that the module is being run standalone by the user and we can take appropriate actions.

## Making Your Own Modules 

Creating your own modules is easy, you've been doing it all along! This is because every Python program is also a module. You just have to make sure it has a `.py` extension. The following example should make it clear.

Example (save as `mymodule.py`):

~~~python
def sayhi():
    print('Hi, this is mymodule speaking.')

__version__ = '0.1'
~~~

The above was a sample *module*. As you can see, there is nothing particularly special about it compared to our usual Python program. We will next see how to use this module in our other Python programs.

Remember that the module should be placed either in the same directory as the program from which we import it, or in one of the directories listed in `sys.path`.

Another module (save as `mymodule_demo.py`):

~~~python
import mymodule

mymodule.sayhi()
print ('Version', mymodule.__version__)
~~~

Output:

~~~
$ python3 mymodule_demo.py
Hi, this is mymodule speaking.
Version 0.1
~~~

How It Works:

Notice that we use the same dotted notation to access members of the module. Python makes good reuse of the same notation to give the distinctive 'Pythonic' feel to it so that we don't have to keep learning new ways to do things.

Here is a version utilising the `from..import` syntax (save as `mymodule_demo2.py`):

~~~python
from mymodule import sayhi, __version__

sayhi()
print('Version', __version__)
~~~

The output of `mymodule_demo2.py` is same as the output of `mymodule_demo.py`.

Notice that if there was already a `__version__` name declared in the module that imports mymodule, there would be a clash. This is also likely because it is common practice for each module to declare it's version number using this name. Hence, it is always recommended to prefer the `import` statement even though it might make your program a little longer.

You could also use:

~~~python
from mymodule import *
~~~

This will import all public names such as `sayhi` but would not import `__version__` because it starts with double underscores.

Zen of Python

:   One of Python's guiding principles is that "Explicit is better than Implicit". Run `import this` to learn more and see [this StackOverflow discussion](http://stackoverflow.com/questions/228181/zen-of-python) which lists examples for each of the principles.

## The dir function 

You can use the built-in `dir` function to list the identifiers that an object defines. For example, for a module, the identifiers include the functions, classes and variables defined in that module.

When you supply a module name to the`dir()` function, it returns the list of the names defined in that module. When no argument is applied to it, it returns the list of names defined in the current module.

Example:

~~~
$ python3

>>> import sys # get list of attributes, in this case, for the sys module

>>> dir(sys)
['__displayhook__', '__doc__', '__excepthook__', '__name__', '__package__', '__s
tderr__', '__stdin__', '__stdout__', '_clear_type_cache', '_compact_freelists',
'_current_frames', '_getframe', 'api_version', 'argv', 'builtin_module_names', '
byteorder', 'call_tracing', 'callstats', 'copyright', 'displayhook', 'dllhandle'
, 'dont_write_bytecode', 'exc_info', 'excepthook', 'exec_prefix', 'executable',
'exit', 'flags', 'float_info', 'getcheckinterval', 'getdefaultencoding', 'getfil
esystemencoding', 'getprofile', 'getrecursionlimit', 'getrefcount', 'getsizeof',
'gettrace', 'getwindowsversion', 'hexversion', 'intern', 'maxsize', 'maxunicode
', 'meta_path', 'modules', 'path', 'path_hooks', 'path_importer_cache', 'platfor
m', 'prefix', 'ps1', 'ps2', 'setcheckinterval', 'setprofile', 'setrecursionlimit
', 'settrace', 'stderr', 'stdin', 'stdout', 'subversion', 'version', 'version_in
fo', 'warnoptions', 'winver']

>>> dir() # get list of attributes for current module
['__builtins__', '__doc__', '__name__', '__package__', 'sys']

>>> a = 5 # create a new variable 'a'

>>> dir()
['__builtins__', '__doc__', '__name__', '__package__', 'a', 'sys']

>>> del a # delete/remove a name

>>> dir()
['__builtins__', '__doc__', '__name__', '__package__', 'sys']

>>>
~~~

How It Works:

First, we see the usage of `dir` on the imported `sys` module. We can see the huge list of attributes that it contains.

Next, we use the `dir` function without passing parameters to it. By default, it returns the list of attributes for the current module. Notice that the list of imported modules is also part of this list.

In order to observe the `dir` in action, we define a new variable `a` and assign it a value and then check `dir`and we observe that there is an additional value in the list of the same name. We remove the variable/attribute of the current module using the `del` statement and the change is reflected again in the output of the `dir` function.

A note on `del` - this statement is used to *delete* a variable/name and after the statement has run, in this case `del a`, you can no longer access the variable `a` - it is as if it never existed before at all.

Note that the `dir()` function works on *any* object. For example, run `dir('print')` to learn about the attributes of the print function, or `dir(str)` for the attributes of the str class.

## Packages 

By now, you must have started observing the hierarchy of organizing your programs. Variables usually go inside functions. Functions and global variables usually go inside modules. What if you wanted to organize modules? That's where packages come into the picture.

Packages are just folders of modules with a special `__init__.py` file that indicates to Python that this folder is special because it contains Python modules.

Let's say you want to create a package called 'world' with subpackages 'asia', 'africa', etc. and these subpackages in turn contain modules like 'india', 'madagascar', etc.

This is how you would structure the folders:

~~~
- <some folder present in the sys.path>/
    - world/
        - __init__.py
        - asia/
            - __init__.py
            - india/
                - __init__.py
                - foo.py
        - africa/
            - __init__.py
            - madagascar/
                - __init__.py
                - bar.py
~~~

Packages are just a convenience to hierarchically organize modules. You will see many instances of this in the [standard library](#standard-library).

## Summary 

Just like functions are reusable parts of programs, modules are reusable programs. Packages are another hierarchy to organize modules. The standard library that comes with Python is an example of such a set of packages and modules.

We have seen how to use these modules and create our own modules.

Next, we will learn about some interesting concepts called data structures.
