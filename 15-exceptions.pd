# Eksepsi 

Eksepsi (pengecualian) akan muncul jika terjadi sesuatu di program Anda yang bersifat *pengecualian*. Misalnya, bagaimana jika Anda ingin membuka satu berkas dan berkas tersebut tidak ada? Atau bagaimana jika Anda secara tidak sengaja menghapusnya saat program masih berjalan? Kondisi semacam ini ditangani dengan menggunakan **eksepsi**.

Mirip dengan itu, bagaimana jika program Anda memiliki statemen yang tidak valid? Hal ini ditangani oleh Python dengan **mengangkat** tangannya dan menyampaikan kepada Anda telah terjadi **kesalahan/_error_** Similarly, what if your program had some invalid statements? This is handled by Python which **raises** its hands and tells you there is an **error**.

## Error 

Misalnya Anda ingin memanggil fungsi sederhana `print`. Bagaimana jika kita salah tulis dari `print` menjadi `Print`? Perhatikan huruf besar di awalnya. Dalam hal ini, Python akan *mengangkat* error sintaksis. 

~~~
>>> Print('Halo Dunia')
Traceback (most recent call last):
  File "<pyshell#0>", line 1, in <module>
    Print('Halo Dunia')
NameError: name 'Print' is not defined
>>> print('Halo Dunia')
Halo Dunia
~~~

Jika Anda perhatikan `NameError` muncul bersama dengan lokasi dimana error terdeteksi. Ini yang disebut sebagai *penanganan kesalahan/_error handler_*. 

## Eksepsi 

Kita akan **mencoba** membaca masukan dari pnegguna. Tekan `ctrl-d` dan lihat apa yang terjadi.

~~~
>>> s = input('Masukkan Sesuatu --> ')
Masukkan Sesuatu --> 
Traceback (most recent call last):
  File "<pyshell#2>", line 1, in <module>
    s = input('Masukkan Sesuatu --> ')
EOFError: EOF when reading a line
~~~

Python memunculkan kesalahan yang dinamakan `EOFError`, pada dasarnya dia menemukan sebuah simbol *end of file/akhir berkas* (yang diwakilkan dalam bentuk `ctrl-d`) saat Python tidak mengharapkan kemunculannya.

## Menangani Eksepsi 

Kita dapat menangani ekspsi dengan menggunakan statemen `try..except`. Pada dasarnya kita meletakkan statemen seperti biasa ke dalam blok `try` dan meletakkan seluruh penanganan kesalahan ke dalam blok `except`. 

Contoh (simpan sebagai `try_except.py`):

~~~python
try:
    text = input('Masukkan sesuatu --> ')
except EOFError:
    print('Kenapa Anda melakukan EOF terhadap saya?')
except KeyboardInterrupt:
    print('Anda membatalkan operasi.')
else:
    print('Anda memasukkan {0}'.format(text))
~~~

Keluaran:

~~~
$ python3 try_except.py
Masukkan sesuatu -->     # Press ctrl-d
Kenapa Anda melakukan EOF terhadap saya?

$ python3 try_except.py
Masukkan sesuatu -->     # Press ctrl-c
Anda membatalkan operasi.

$ python3 try_except.py
Masukkan sesuatu --> tidak ada pengecualian 
Anda memasukkan tidak ada pengecualian
~~~

Bagaimana Cara Kerjanya:

Kita menempatkan semua statemen yang akan memunculkan eksepsi atau pesan kesalahan di dalam blok `try` kemudian meletakkan penanggung jawab (_handler_) ke dalam blok `except`. Klausa `except` ini dapat menangani eksepsi atau pesan kesalahan tunggal, atau penanganan lebih dari satu eksepsi yang ditulis dengan pemisah koma. Jika pesan kesalahan atau eksepsinya tidak ditulis, dia akan menangani *semua* eksepsi dan pesan kesalahan. 

Mohon dicatat bahwa harus ada paling tidak satu klausa `except` pada setiap klausa `try` yang dibuat. Jika tidak, untuk apa membuat blok `try`? 

Jika pesan kesalahan atau eksepsi tidak ditangani, maka handler Python yang baku akan dipanggil, program akan berhenti dan menampilkan pesan kesalahan. Kita sudah lihat hal ini sebelumnya.

Anda juga dapat menggunakan klausa `else` pada setiap blok `try..except`. Klausa ini akan dieksekusi jika tidak ada eksepsi yang terjadi. 

Dalam contoh berikutnya, kita juga akan melihat bagaimana cara memperoleh eksepsi dari sebuah obyek sehingga kita bisa mengambil informasi lebih banyak.

## Memunculkan Eksepsi

Anda dapat *memunculkan* eksepsi dengan menggunakan statemen `raise` dengan memberikan nama dari kesalahan/ekspsi dan obyek eksepsi yang akan *dilemparkan*

Kesalahan atau eksepsi yang dapat Anda munculkan harus berupa kelas yang secara langsung atau tidak diturunkan dari kelas `Exception`. 

Contoh (simpan dengan nama `munculkan.py`):

~~~python
class EksepsiMasukanSingkat(Exception):
    '''kelas eksepsi buatan-sendiri.'''
    def __init__(self, panjang, minimal):
        Exception.__init__(self)
        self.panjang = panjang 
        self.minimal = minimal 

try:
    text = input('Ketikkan sesuatu --> ')
    if len(text) < 3:
        raise EksepsiMasukanSingkat(len(text), 3)
    # Perintah lain dapat dilanjutkan sebagaimana biasanya di sini
except EOFError:
    print('Kenapa Anda menimpakan EOF ke saya?')
except ShortInputException as ex:
    print('EksepsiMasukanSingkat: Panjang masukan adalah {0}, dibutuhkan minimal sepanjang {1}'\
          .format(ex.panjang, ex.minimal))
else:
    print('Tidak ada eksepsi yang dimunculkan.')
~~~

Keluaran:

~~~
$ python3 munculkan.py
Ketikkan sesuatu --> a
EksepsiMasukanSingkat: Panjang masukan adalah 1, dibutuhkan minimal sepanjang 3

$ python3 munculkan.py
Ketikkan sesuatu --> abc
Tidak ada eksepsi yang dimunculkan.
~~~

Bagaimana Cara Kerjanya:

Di sini, kita membuat jenis eksepsi kita sendiri. Eksepsi ini disebut `EksepsiMasukanSingkat`. Dia punya dua field - `panjang` untuk menampung panjangnya masukan (_input_), dan `minimal` yang merupakan minimal panjang yang diinginkan oleh program.

Dalam klausul `except`, kita menyebutkan kelas pesan kesalahannya, yang akan disimpan `sebagai` nama variabel yang menjadi rujukan setiap obyek pesan kesalahan/eksepsi terkait. Hal ini dapat dianalogikan sebagai parameter dan arguman dalam pemanggilan fungsi. Dalam klausul `except` di sini, kita gunakan field `panjang` dan `minimal` untuk mencetak pesan yang sesuai terhadap pengguna.

## Try .. Finally 

Misalnya Anda membaca berkas dalam program. Bagaimana Anda tahu bahwa obyek berkas yang bersangkutan sudah ditutup secara semestinya atau ada eksepsi yang dimunculkan? Ini dapat kita atasi dengan penggunaan blok `finally`. Catat bahwa Anda dapat menggunakan klausul `except` bersamaan dengan blok `finally` untuk blok yang sama dengan `try`. Anda harus sisipkan diantara salah satunya jika Anda ingin memanfaatkan keduanya. 

Simpan sebagai `finally.py`:

~~~python
import time

try:
    f = open('puisi.txt')
    while True: # idiom yang umum dalam pembacaan-berkas
        line = f.readline()
        if len(line) == 0:
            break
        print(line, end='')
        time.sleep(2) # Jeda dua detik untuk memastikan perintahnya dijalankan
except KeyboardInterrupt:
    print('!! Anda membatalkan pembacaan berkas.')
finally:
    f.close()
    print('(Pembersihan: Menutup berkas)')
~~~

Keluaran:

~~~
$ python3 finally.py
Programming menyenangkan
Saat pekerjaan terselesaikan
jika kamu ingin kerja menyenangkan:
!! Anda membatalkan pembacaan berkas.
(Pembersihan: Menutup berkas)
~~~

Bagaimana Cara Kerjanya:

We do the usual file-reading stuff, but we have arbitrarily introduced sleeping for 2 seconds after printing each line using the `time.sleep` function so that the program runs slowly (Python is very fast by nature). When the program is still running, press `ctrl-c` to interrupt/cancel the program.

Observe that the `KeyboardInterrupt` exception is thrown and the program quits. However, before the program exits, the finally clause is executed and the file object is always closed.

## The with statement 

Acquiring a resource in the `try` block and subsequently releasing the resource in the `finally` block is a common pattern. Hence, there is also a `with` statement that enables this to be done in a clean manner:


Save as `using_with.py`:

~~~python
with open("poem.txt") as f:
    for line in f:
        print(line, end='')
~~~

How It Works:

The output should be same as the previous example. The difference here is that we are using the `open` function with the `with` statement - we leave the closing of the file to be done automatically by `with open`.

What happens behind the scenes is that there is a protocol used by the `with` statement. It fetches the object returned by the `open` statement, let's call it "thefile" in this case.

It *always* calls the `thefile.__enter__` function before starting the block of code under it and *always* calls `thefile.__exit__` after finishing the block of code.

So the code that we would have written in a `finally` block should be taken care of automatically by the `__exit__`method. This is what helps us to avoid having to use explicit `try..finally` statements repeatedly.

More discussion on this topic is beyond scope of this book, so please refer [PEP 343](http://www.python.org/dev/peps/pep-0343/) for a comprehensive explanation.

## Summary 

We have discussed the usage of the `try..except` and `try..finally` statements. We have seen how to create our own exception types and how to raise exceptions as well.

Next, we will explore the Python Standard Library.
