# Eksepsi 

Eksepsi (pengecualian) akan muncul jika terjadi sesuatu di program Anda yang bersifat *pengecualian*. Misalnya, bagaimana jika Anda ingin membuka satu berkas dan berkas tersebut tidak ada? Atau bagaimana jika Anda secara tidak sengaja menghapusnya saat program masih berjalan? Kondisi semacam ini ditangani dengan menggunakan **eksepsi**.

Mirip dengan itu, bagaimana jika program Anda memiliki statemen yang tidak valid? Hal ini ditangani oleh Python dengan **mengangkat** tangannya dan menyampaikan kepada Anda telah terjadi **kesalahan/_error_** Similarly, what if your program had some invalid statements? This is handled by Python which **raises** its hands and tells you there is an **error**.

## Error 

Misalnya Anda ingin memanggil fungsi sederhana `print`. Bagaimana jika kita salah tulis dari `print` menjadi `Print`? Perhatikan huruf besar di awalnya. Dalam hal ini, Python akan *mengangkat* error sintaksis. 

~~~
>>> Print('Halo Dunia')
Traceback (most recent call last):
  File "<pyshell#0>", line 1, in <module>
    Print('Halo Dunia')
NameError: name 'Print' is not defined
>>> print('Halo Dunia')
Halo Dunia
~~~

Jika Anda perhatikan `NameError` muncul bersama dengan lokasi dimana error terdeteksi. Ini yang disebut sebagai *penanganan kesalahan/_error handler_*. 

## Eksepsi 

Kita akan **mencoba** membaca masukan dari pnegguna. Tekan `ctrl-d` dan lihat apa yang terjadi.

~~~
>>> s = input('Masukkan Sesuatu --> ')
Masukkan Sesuatu --> 
Traceback (most recent call last):
  File "<pyshell#2>", line 1, in <module>
    s = input('Masukkan Sesuatu --> ')
EOFError: EOF when reading a line
~~~

Python memunculkan kesalahan yang dinamakan `EOFError`, pada dasarnya dia menemukan sebuah simbol *end of file/akhir berkas* (yang diwakilkan dalam bentuk `ctrl-d`) saat Python tidak mengharapkan kemunculannya.

## Menangani Eksepsi 

Kita dapat menangani ekspsi dengan menggunakan statemen `try..except`. Pada dasarnya kita meletakkan statemen seperti biasa ke dalam blok `try` dan meletakkan seluruh penanganan kesalahan ke dalam blok `except`. 

Contoh (simpan sebagai `try_except.py`):

~~~python
try:
    text = input('Masukkan sesuatu --> ')
except EOFError:
    print('Kenapa Anda melakukan EOF terhadap saya?')
except KeyboardInterrupt:
    print('Anda membatalkan operasi.')
else:
    print('Anda memasukkan {0}'.format(text))
~~~

Keluaran:

~~~
$ python3 try_except.py
Masukkan sesuatu -->     # Press ctrl-d
Kenapa Anda melakukan EOF terhadap saya?

$ python3 try_except.py
Masukkan sesuatu -->     # Press ctrl-c
Anda membatalkan operasi.

$ python3 try_except.py
Masukkan sesuatu --> tidak ada pengecualian 
Anda memasukkan tidak ada pengecualian
~~~

Bagaimana Cara Kerjanya:

Kita menempatkan semua statemen yang akan memunculkan eksepsi atau pesan kesalahan di dalam blok `try` kemudian meletakkan penanggung jawab (_handler_) ke dalam blok `except`. Klausa `except` ini dapat menangani eksepsi atau pesan kesalahan tunggal, atau penanganan lebih dari satu eksepsi yang ditulis dengan pemisah koma. Jika pesan kesalahan atau eksepsinya tidak ditulis, dia akan menangani *semua* eksepsi dan pesan kesalahan. 

Mohon dicatat bahwa harus ada paling tidak satu klausa `except` pada setiap klausa `try` yang dibuat. Jika tidak, untuk apa membuat blok `try`? 

Jika pesan kesalahan atau eksepsi tidak ditangani, maka handler Python yang baku akan dipanggil, program akan berhenti dan menampilkan pesan kesalahan. Kita sudah lihat hal ini sebelumnya.

Anda juga dapat menggunakan klausa `else` pada setiap blok `try..except`. Klausa ini akan dieksekusi jika tidak ada eksepsi yang terjadi. 

Dalam contoh berikutnya, kita juga akan melihat bagaimana cara memperoleh eksepsi dari sebuah objek sehingga kita bisa mengambil informasi lebih banyak.

## Memunculkan Eksepsi

Anda dapat *memunculkan* eksepsi dengan menggunakan statemen `raise` dengan memberikan nama dari kesalahan/ekspsi dan objek eksepsi yang akan *dilemparkan*

Kesalahan atau eksepsi yang dapat Anda munculkan harus berupa kelas yang secara langsung atau tidak diturunkan dari kelas `Exception`. 

Contoh (simpan dengan nama `munculkan.py`):

~~~python
class EksepsiMasukanSingkat(Exception):
    '''kelas eksepsi buatan-sendiri.'''
    def __init__(self, panjang, minimal):
        Exception.__init__(self)
        self.panjang = panjang 
        self.minimal = minimal 

try:
    text = input('Ketikkan sesuatu --> ')
    if len(text) < 3:
        raise EksepsiMasukanSingkat(len(text), 3)
    # Perintah lain dapat dilanjutkan sebagaimana biasanya di sini
except EOFError:
    print('Kenapa Anda menimpakan EOF ke saya?')
except ShortInputException as ex:
    print('EksepsiMasukanSingkat: Panjang masukan adalah {0}, dibutuhkan minimal sepanjang {1}'\
          .format(ex.panjang, ex.minimal))
else:
    print('Tidak ada eksepsi yang dimunculkan.')
~~~

Keluaran:

~~~
$ python3 munculkan.py
Ketikkan sesuatu --> a
EksepsiMasukanSingkat: Panjang masukan adalah 1, dibutuhkan minimal sepanjang 3

$ python3 munculkan.py
Ketikkan sesuatu --> abc
Tidak ada eksepsi yang dimunculkan.
~~~

Bagaimana Cara Kerjanya:

Di sini, kita membuat jenis eksepsi kita sendiri. Eksepsi ini disebut `EksepsiMasukanSingkat`. Dia punya dua field - `panjang` untuk menampung panjangnya masukan (_input_), dan `minimal` yang merupakan minimal panjang yang diinginkan oleh program.

Dalam klausul `except`, kita menyebutkan kelas pesan kesalahannya, yang akan disimpan `sebagai` nama variabel yang menjadi rujukan setiap objek pesan kesalahan/eksepsi terkait. Hal ini dapat dianalogikan sebagai parameter dan arguman dalam pemanggilan fungsi. Dalam klausul `except` di sini, kita gunakan field `panjang` dan `minimal` untuk mencetak pesan yang sesuai terhadap pengguna.

## Try .. Finally 

Misalnya Anda membaca berkas dalam program. Bagaimana Anda tahu bahwa objek berkas yang bersangkutan sudah ditutup secara semestinya atau ada eksepsi yang dimunculkan? Ini dapat kita atasi dengan penggunaan blok `finally`. Catat bahwa Anda dapat menggunakan klausul `except` bersamaan dengan blok `finally` untuk blok yang sama dengan `try`. Anda harus sisipkan diantara salah satunya jika Anda ingin memanfaatkan keduanya. 

Simpan sebagai `finally.py`:

~~~python
import time

try:
    f = open('puisi.txt')
    while True: # idiom yang umum dalam pembacaan-berkas
        line = f.readline()
        if len(line) == 0:
            break
        print(line, end='')
        time.sleep(2) # Jeda dua detik untuk memastikan perintahnya dijalankan
except KeyboardInterrupt:
    print('!! Anda membatalkan pembacaan berkas.')
finally:
    f.close()
    print('(Pembersihan: Menutup berkas)')
~~~

Keluaran:

~~~
$ python3 finally.py
Programming menyenangkan
Saat pekerjaan terselesaikan
jika kamu ingin kerja menyenangkan:
!! Anda membatalkan pembacaan berkas.
(Pembersihan: Menutup berkas)
~~~

Bagaimana Cara Kerjanya:

Kita telah lakukan cara pembacaan berkas seperti biasanya, namun secara khusus kita kenalkan waktu jeda selama 2 detik setelah mencetak tiap baris dengan fungsi `time.sleep` sehingga program akan berjalan secara lebih lambat (Python biasanya berjalan sangat cepat). Ketika program masih berjalan, tekan `ctrl-c` untuk menginterupsi/membatalkan program.

Perhatikan bahwa eksepsi `KeyboardInterrupt` dimunculkan dan program berhenti berjalan. Bagaimanapun juga, sebelum program berhenti, klausul _finally_ dieksekusi dan objek berkas akan tertutup setelahnya.

## Statemen with 

Memanfaatkan sumber daya di dalam blok `try` dan secara berurutan melepaskan sumber daya lewat blok `finally` adalah hal yang biasa. Meskipun demikian, ada juga statemen `with` yang memungkinkan hal ini dilakukan secara bersih.


Simpan sebagai `gunakan_with.py`:

~~~python
with open("puisi.txt") as f:
    for line in f:
        print(line, end='')
~~~

Bagaimana Cara Kerjanya:

Keluaran harusnya sama dengan contoh sebelumnya. Bedanya di sini kita menggunakan fungsi `open` dengan statemen `with` - kita tinggalkan perintah menutup berkas yang nantinya secara otomatis akan dilakukan oleh `with open`.

Yan terjadi di belakang layar sebetulnya ada protokol yang digunakan oleh statemen `with`. Dia mengambil objek yang dikembalikan oleh statemen `open`, dalam kasus ini kita sebut saja sebagai `sangberkas`. 

Dia *selalu* memanggil fungsi `sangberkas.__enter__` sebelum memulai blok perintah di bawahnya dan *selalu* memanggil `sangberkas.__exit__` setelah menyelesaikan blok perintah.

Jadi kode yang kita tulis di blok `finally` seharusnya secara otomatis sudah diurus oleh metode `__exit__. Ini membantu kita untuk menghindari penggunaan statemen `try..finally` secara eksplisit dan terus menerus.

Diskusi lebih lanjut tentang hal ini di luar skup buku ini, jadi silakan rujuk ke [PEP 343](http://www.python.org/dev/peps/pep-0343/) untuk penjelasan yang lebih komprehensif.

## Ringkasan 

Kita telah diskusi penggunaan statemen `try..except` dan `try..finally`. Kita juga telah mencoba bagaimana membuat jenis eksepsi kita sendiri dan bagaimana memunculkan eksepsi.

Selanjutnya, kita akan menelusuri Pustaka Baku Python (_Python Standard Library_).
