# Langkah Pertama 

Kita sekarang akan melihat bagaimana membuat program yang sering digunakan saat memulai pemrograman, yakni 'Hello World' di Python. Langkah ini akan mengajari Anda bagaimana menulis, menyimpan dan menjalankan program Python.

Ada dua cara menjalankan program Anda dengan menggunakan Python - menggunakan prompt interpreter interaktif atau menggunakan berkas sumber (source file). Kita akan lihat bagaimana cara menggunakan kedua metode ini.

## Menggunakan Prompt Interpreter 

Buka terminal di sistem operasi Anda (sebagaimana telah didiskusikan sebelumnya di [Bab Instalasi](#installation)) lalu buka prompt Python dengan mengetikkan `python3` dan menekan tombol enter.

Sekali Anda mulai `python3`, Anda akan melihat `>>>` di mana Anda dapat mulai mengetikkan sesuatu. Ini disebut sebagai *prompt interpreter Python*.

Di prompt interpreter Python, ketik `print('Hello World')` lalu tekan tombol `enter`. Anda seharusnya melihat keluaran `Hello World` 

Berikut contoh apa yang seharusnya Anda lihat, saat menggunakan komputer Mac OS X. Detail tentang perangkat lunak Python, tentu akan berbeda berdasarkan komputer Anda, tapi bagian prompt (contoh dari `>>>` dan berikutnya) seharusnya sama dengan mengabaikan sistem operasi yang Anda miliki.

~~~
$ python3
Python 3.3.0 (default, Oct 22 2012, 12:20:36)
[GCC 4.2.1 Compatible Apple Clang 4.0 ((tags/Apple/clang-421.0.60))] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> print('hello world')
hello world
>>> 
~~~

Perhatikan bahwa Python memberikan keluaran di baris berikutnya secara langsung! Yang baru Anda masukkan adalah *statemen* Python tunggal. Kita menggunakan `print` untuk (secara mengejutkan) menampilkan setiap nilai yang Anda masukkan. Di sini kita memasukkan teks `Hello World` dan secara langsung tampil di layar.

Bagaimana Berhenti dari Prompt Interpreter

:   Jika Anda menggunakan shell Linux atau Unix, Anda dapat keluar dari prompt interpreter dengan menekan `ctrl-d` atau memasukkan perintah `exit()` (catatan: ingat selalu untuk memasukkan tanda kurung, '()') diikuti dengan penekanan tombol `enter`. Jika Anda menggunakan baris perintah Windows, tekan `ctrl-z` diikuti tombol `enter`.

## Memilih Editor

Kita tidak dapat menuliskan program di baris interpreter setiap kali ingin menjalankan sesuatu, jadi kita harus menuliskannya di dalam berkas dan kita dapat menjalankan program kita selama beberapa kali.

Untuk membuat berkas kode program Python, kita perlu perangkat lunak berupa editor sehingga kita dapat menulis dan menyimpannya. Editor bahasa pemrograman Python yang baik akan membuat hidup Anda lebih mudah dalam menulis berkas kode program. Oleh karena itu, pemilihan editor sifatnya sangat penting. Anda harus memilih editor sebagaimana memilih mobil untuk dikendarai. Editor yang bagus akan membantu Anda menulis program Python secara lebih mudah, dan membuat perjalanan Anda lebih nyaman dalam meraih tujuan Anda secara lebih cepat dan aman.

Salah satu dari syarat dasar adalah *syntax highlighting* atau pewarnaan sintaks di mana bagian program Python Anda akan diwarnai secara berbeda sehingga Anda dapat benar-benar *melihat* program Anda dan memvisualisasikan bagaimana jika program tersebut berjalan.

Jika Anda tidak tahu darimana memulai, Saya rekomendasikan untuk menggunakan perangkat lunak editor [Komodo Edit](http://www.activestate.com/komodo-edit/downloads) yang tersedia untuk Windows, Mac OS X dan Linux.

Jika Anda menggunakan Windows, **jangan menggunakan Notepad** - perangkat lunak tersebut tidak disarankan untuk dipilih karena tidak ada pewarnaan sintaks dan lebih penting lagi, tidak mendukung indentasi teks, yang merupakan syarat sangat penting dalam kasus ini, yang nanti akan kita lihat. Editor yang bagus seperti Komodo Edit akan melakukan ini secara otomatis.


Jika Anda merupakan programmer yang berpengalaman, Anda pasti sudah menggunakan [Vim](http://www.vim.org/) atau [Emacs](http://www.gnu.org/software/emacs/). Tanpa perlu banyak pembahasan, kedua perangkat lunak ini merupakan editor yang paling berkualitas dan Anda akan memperoleh banyak keuntungan jika menggunakannya untuk menulis program Python. Jika Anda mau menyediakan atau punya waktu untuk belajar Vim atau Emacs, saya menganjurkan untuk mempelajarinya karena akan sangat bermanfaat dalam jangka panjang. Bagaimanapun juga, sebagaimana saya sebutkan sebelumnya, pemula dapat mulai dengan menggukana Komodo Edit dan fokus belajar Python daripada belajar editor untuk saat ini.

Sebagai pengingat kembali, silakan pilih editor yang layak untuk Anda - Hal itu dapat membuat penulisan program Python menjadi lebih menyenangkan dan mudah.

Untuk Pengguna Vim

:   Ada pengenalan yang bagus tentang bagaimana [membuat Vim menjadi Python IDE yang bagus oleh John M Anderson](http://blog.sontek.net/blog/detail/turning-vim-into-a-modern-python-ide). Yang juga direkomendasikan adalah [jedi-vim plugin](https://github.com/davidhalter/jedi-vim) dan [konfigurasi dotvim saya](https://github.com/swaroopch/dotvim).

Untuk Pengguna Emacs

:   Ada pengenalan yang bagus tentang bagaimana [membuat Emacs menjadi Python IDE yang bagus oleh Pedro Kroger](http://pedrokroger.net/2010/07/configuring-emacs-as-a-python-ide-2/). Yang juga direkomendasikan adalah [konfigurasi dotemacs BG](https://github.com/ghoseb/dotemacs).

## Menggunakan Berkas Program 

Sekarang kita kembali ke pemrograman. Ada tradisi setiap Anda belajar bahasa pemrograman baru, program pertama yang Anda tulis dan jalankan adalah program 'Hello World' - program itu hanyalah menampilkan 'Hello World' saat Anda menjalankannya. Sebagaimana dikatakan oleh Simon Cozens (pengarang buku yang sangat menakjubkan 'Beginning Perl'), itu adalah "mantra tradisional dewa pemrograman yang membantu Anda belajar bahasa tersebut secara lebih baik."

Pilihlah Editor Anda, dan masuk ke dalam program tersebut, simpan dengan nama `hello.py`.

Jika Anda menggunakan Komodo Edit, klik di `File` --- `New` --- `New File`, ketik baris berikut:

~~~python
print('Hello World')
~~~

Di Komodo Edit, klik `File` --- `Save` untuk menyimpan berkas. 

Dimana Anda harus simpan berkasnya? Di setiap folder yang Anda sendiri tahu persis di mana letak folder tersebut. Jika Anda tidak tahu apa maksudnya, buat folder baru dan gunakan folder tersebut untuk menyimpan dan menjalankan semua program Python Anda:

- `C:\\py` di  Windows
- `/tmp/py` di Linux
- `/tmp/py` di Mac OS X

Untuk membuat folder, gunakan perintah `mkdir` di terminal, contohnya `mkdir /tmp/py`.

Penting

:   Selalu pastikan Anda memberi nama ekstensi berkasnya `.py`, sebagai contoh `foo.py`.

Di Komodo Edit, klik `Tools` --- `Run Command`, ketik `python3 hello.py` dan klik `Run` Anda akan melihat keluaran tercetak sebagaimana tangkapan layar di bawah ini. 

![Tangkapan layar dari Komodo Edit untuk program Hello World](assets/komodo-edit-hello-world.png)

Jalan terbaik adalah, tidak mengetikkannya di Komodo Edit, namun menggunakan terminal:

#. Buka Terminal sebagaimana telah dijelaskan di [Bab Instalasi](#installation).
#. *G*anti *d*irektori di mana Anda menyimpan berkas, sebagai contoh, `cd /tmp/py`
#. Jalankan program dengan mengetikkan perintah `python3 hello.py`.

Keluaran akan ditampilkan sebagai berikut.

~~~
$ python3 hello.py
Hello World
~~~

Jika Anda memperoleh keluaran sebagaimana yang ditampilkan di atas, selamat! - Anda telah berhasil menjalankan program Python pertama Anda. Anda telah berhasil melewati bagian yang paling sulit dari belajar pemrograman, yakni, memulai program pertama.

Jika Anda memperoleh pesan kesalahan, mohon ketikkan lagi program di atas *sama persis* seperti ditampilkan di atas dan jalankan program kembali. Mohon dicatat bawah Python sangat peka terhadap huruf besar kecil, seperti `print` tidak sama dengan `Print` - catat bahwa `p` di kata pertama adalah huruf kecil dan `p` di kata berikutnya adalah huruf besar. Juga, pastikan tidak ada spasi atau tab sebelum huruf pertama di tiap bari - kita akan [lihat nanti kenapa ini penting](#indentation).

**Bagaimana Cara Kerjanya**

Program Python disusun atas *statemen*. Di Program pertama kita, kita hanya punya satu statemen. Dalam statemen ini, kita sebut sebagai *fungsi* `print` yang hanya mencetak teks `Hello World`. Kita akan belajar tentang fungsi secara lebih mendalam di [bab berikutnya](#functions) - Apa yang perlu Anda pahami sekarang adalah setiap yang Anda ketikkan setelah tanda petik akan dikeluarkan kembali di layar. Dalam kasus ini kita mengetikkan teks '`Hello World`'

### Program Python yang bisa Dieksekusi 

Ini hanya berlaku untuk pengguna Linux dan Unix, tapi pengguna Windows juga perlu tahu hal ini.

Setiap kali, Anda ingin menjalankan program Python, Anda harus secara eksplisit mengetikkan `python3 foo.py`, tapi kenapa kita tidak menjalankannya seperti program lain di komputer? Kita dapat melakukannya dengan menggunakan sesuatu yang disebut baris *hashbang*.

Tambahkan baris berikut di *baris pertama* program Anda:

~~~python
#!/usr/bin/env python3
~~~

Jadi program Anda akan terlihat seperti ini sekarang:

~~~python
#!/usr/bin/env python3
print('Hello World')
~~~

Kedua, kita harus memberikan program tersebut hak eksekusi dengan perintah `chmod` lalu *jalankan* berkas program.

Perintah chmod yang digunakan di sini adalah untuk *me*ngubah *mod*e dari file dengan memberikan hak e*k*sekusi untuk *s*emua pengguna di dalam sistem.

~~~
$ chmod a+x hello.py
~~~

Sekarang, kita dapat menjalankan program secara langsung sebab sistem operasi akan memanggil `/usr/bin/env` yang akan menemukan Python 3 yang sudah kita pasang, sehingga tahu bagaimana menjalankan berkas program tersebut:

~~~
$ ./hello.py
Hello World
~~~

Kita menggunakan `./` untuk mengindikasikan bahwa program berada di folder saat ini. 

Untuk menjadikannya lebih menarik, Anda dapat mengganti nama berkas tersebut hanya dengan nama `hello` dan menjalankannya dengan `./hello` dan tetap akan jalan mengingat sistem sudah tahu bahwa untuk menjalankan program tersebut harus menggunakan interpreter yang lokasinya sudah ditentukan di baris pertama berkas program.

Sejauh ini, kita sudah menjalankan program kita sepanjang kita tahu path-nya secara tepat. Bagaimana jika kita ingin menjalankan program dari folder? Anda dapat melakukannya dengan menyimpan program di satu folder yang terdaftar di variabel lingkungan `PATH`.

Setiap Anda menjalankan program apapun, sistem akan mencari program tersebut di tiap folder yang terdaftar dalam variabel lingkungan `PATH` dan menjalankan program tersebut. Kita dapat membuat program ini tersedia di mana saja dengan menyalin berkas program ini ke dalam direktori-direktori yang terdaftar di `PATH`.

~~~
$ echo $PATH
/usr/local/bin:/usr/bin:/bin:/usr/X11R6/bin:/home/swaroop/bin
$ cp hello.py /home/swaroop/bin/hello
$ hello
Hello World
~~~

Kita dapat menampilkan variabel `PATH` dengan menggunakan perintah `echo` dan memberikan awalan nama variabel dengan `$` untuk mengindikasikan kepada shell bahwa kita membutuhkan nilai dari "variabel lingkungan". Kita lihat bahwa `/home/swaroop/bin` ada di salah satu direktori di variabel PATH di mana *swaroop* adalah nama user yang saya gunakan di dalam sistem. Biasanya ada direktori yang sama persis untuk username Anda di dalam sistem.

Jika Anda ingin menambahkan direktori pilihan Anda ke dalam variabel `PATH` - ini dapat dilakukan dengan menjalankan perintah `export PATH=$PATH:/home/swaroop/mydir` di mana `'/home/swaroop/mydir'` adalah direktori yang ingin saya tambahkan ke dalam variabel `PATH`.

Metode ini sangat bermanfaat jika Anda ingin menuliskan perintah yang dapat Anda jalankan tiap saat, di mana saja. Hal ini seperti membuat perintah Anda sendiri seperti `cd` atau perintah lain yang Anda gunakan di terminal.

## Memperoleh Bantuan 

Jika Anda butuh informasi cepat tentang fungsi atau statemen di Python, Anda dapat menggunakan fungsi `help` yang secara baku sudah ada. Hal ini sangat bermanfaat terutama saat menggunakan prompt interpeter. Sebagai contoh, jalankan perintah `help(print)` - akan menampilkan bantuan dari fungsi print yang digunakan untuk mencetak semua masukan ke dalam layar.

Catatan

:   tekan `q` untuk keluar dari bantuan.

Mirip dengan hal tersebut, Anda dapat memperoleh informasi segala sesuatu tentang Python. Cukup gunakan `help()` untuk mempelajari lebih lanjut tentang bagaimana menggunakan `help` itu sendiri!

Jika Anda ingin memperoleh bantuan operator seperti `return`, Anda harus meletakknya di dalam tanda petik seperti `help('return')` sehingga Python tidak bingung tentang apa yang Anda ingin lakukan.

## Ringkasan 

Anda seharusnya sudah mampu menulis, menyimpan dan menjalankan program Python secara mudah.

Sekarang Anda adalah pengguna Python, mari belajar beberapa konsep Python lebih lanjut.
