# Dasar 

Hanya menampilkan 'Hello World' tentu saja tidak cukup bukan? Anda ingin melakukan sesuatu lebih dari itu - Anda ingin mengambil beberapa masukan, memanipulasinya dan mengeluarkannya dalam bentuk tertentu. Kita dapat melakukan ini di Python dengan menggunakan konstanta dan variabel, dan kita akan belajar konsep ini secara baik di bab ini. 

## Komentar 

*Komentar* adalah teks apa saja yang ada setelah tanda `#` dan utamanya digunakan sebagai catatan untuk pembaca program. 

Sebagai contoh:

~~~python
print('Hello World') # Mohon dicatat bahwa print adalah fungsi 
~~~

atau:

~~~python
# Mohon dicatat bahwa print adalah fungsi 
print('Hello World')
~~~

Gunakan komentar yang bermanfaat di dalam program sebanyak mungkin yang Anda bisa untuk:

- menjelaskan asumsi
- menjelaskan keputusan penting
- menjelaskan detail yang penting 
- menjelaskan masalah yang Anda coba pecahkan
- menjelaskan masalah yang Anda coba atasi di dalam program, dll.

[*Kode menunjukkan bagaimana, sedangkan komentar menunjukkan kepada Anda mengapa.*](http://www.codinghorror.com/blog/2006/12/code-tells-you-how-comments-tell-you-why.html)

Hal ini bermanfaat bagi pembaca program Anda sehingga mereka dapat memahami dengan mudah apa yang sedang dikerjakan oleh program. Ingat, bahwa orang yang membaca tersebut bisa jadi Anda sendiri 6 bulan kemudian.

## Konstanta Literal 

Contoh konstanta literal adalah nomor seperti `5`, `1.23`, atau string seperti `'Ini adalah string'` atau `"Ini, adalah string!"`. Disebut sebagai literal karena ia memang *literal* - Anda dapat menggunakan nilainya sebagaimana yang dituliskan (secara literal). Angka `2` selalu merepresentasikan dirinya sendiri, dan bukan hal lain - Ia merupakan *konstanta* karena nilainya tidak dapat diganti. Inilah kenapa semua ini disebut sebagai konstanta literal.

## Nomor 

Nomor biasanya digunakan untuk dua jenis - integer dan float.

Contoh sebuah integer adalah `2` di mana semuanya adalah angka.

Contoh dari angka floating point (atau sering disebut *float*) adalah `3.23` dan `52.3E-4`. Notasi `E` mengindikasikan basis 10. Dalam hal ini, `52.3E4` merarti `52.3 * 10^-4^`.

Catatan untuk Programmer Berpengalaman

:   Tidak ada pembedaan untuk tipe `long`. Tipe `int` dapat digunakan sebagai integer dalam ukuran berapapun.

## String 

String adalah urutan *karakter*. String pada dasarnya adalah kumpulan kata-kata.

Anda akan menggunakan string di hampir setiap program Python yang Anda tulis, jadi perhatikan baik-baik bagian berikut ini.

### Tanda Kutip

Anda dapat menetukan string dengan tanda kutip seperti `'Kutip saya di sini'`. Setiap spasi kosong seperti spasi dan tab akan ditampilkan sebagaimana adanya.

### Kutip Ganda

String dalam kutip ganda akan bekerja mirip seperti tanda kutip tunggal. Sebagai contoh `"Siapa nama Anda?"`

### Kutip Tiga

Anda dapat menetukan string lebih dari satu baris dengan menggunakan kutip tiga - (`"""` atau `'''`). Anda dapat menggunakan tanda kutip dan kutip ganda secara bebas di dalam kutip tiga. Sebagai contoh:

~~~python
'''Ini adalah string lebih dari satu baris. Ini adalah baris pertama.
Ini baris kedua.
"Siapa nama Anda?," Tanyaku.
Dia bilang "Bond, James Bond."
'''
~~~

### String bersifat Abadi (Immutable) 

Ini berarti sekali Anda membuat string, Anda tidak dapat mengubahnya. Meskipun ini terlihat jelek, tapi sebetulnya tidak. Kita akan melihat kenapa hal ini bukanlah batasan di beberapa program yang akan kita lihat kemudian.

Catatan untuk Programmer C/C++ 

:   Tidak ada pemisahan tipe data `char` di Python. Hal itu tidak diperlukan dan saya yakin Anda tidak akan merasa kehilangannya.

Catatan untuk Programmer Perl/PHP 

:   Ingat bahwa string bertanda kutip tunggal maupun ganda, adalah sama - mereka tidak berbeda sama sekali.

### Metode Format 

Kadang kita ingin menyusun string dari informasi lain. Ini tempat di mana metode `format()` berguna.

Simpan baris berikut sebagai berkas bernama `str_format.py`:

~~~python
usia = 20
nama = 'Swaroop'

print('{0} masih {1} tahun ketika dia menulis buku ini'.format(name, age))
print('Kenapa {0} bermain-main dengan python itu?'.format(name))
~~~

Output:

~~~
$ python3 str_format.py
Swaroop was 20 years old when he wrote this book
Why is Swaroop playing with that python?
~~~

Bagaimana Cara Kerjanya:

String menggunakan ketentuan khusus, dan dapat diulang, metode *format* dapat dipanggil untuk menggantikan argumen yang ada di dalam format.

Coba perhatikan penggunaan pertama, di mana kita menggunakan `{0}` dan ini terkait dengan variabel `nama` yang merupakan argumen pertama dari metode `format`. Dan selanjutnya juga mirip, ketentuan berikutnya adalah `{1}` yang tersambung ke `usia` yang merupakan arguman kedua dari metode format. Mohon dicatat bahwa Python mulai penghitungan dari 0 yang berarti posisi pertama dalam indeks ini adalah 0, dan kedua adalah indeks 1 dan seterusnya.

Mohon perhatikan bahwa kita dapat memperoleh hasil yang sama dengan penggabungan string (string concatenation): `nama + ' berusia ' + str(usia) + ' tahun'` tapi ini lebih jelek dan lebih banyak kemungkinan salah. Kedua, konversi ke string dapat dilakukan secara otomatis lewat metode `format` daripada konversi eksplisit ke dalam string yang dibutuhkan dalam kasus ini. Ketiga, kita dapat menggunakan metode `format`, kita dapat mengubah pesan tanpa harus berurusan bagaimana variable tersebut digunakan dan sebaliknya.

Juga catat bahwa nomor tersebut sifatnya pilihan, jadi Anda dapat menuliskannya dengan:

~~~python
usia = 20
nama = 'Swaroop'

print('{} masih {} tahun ketika dia menulis buku ini'.format(name, age))
print('Kenapa {} bermain-main dengan python itu?'.format(name))
~~~

yang akan menghasilkan output yang sama persis dengan program sebelumnya.

Apa yang Python lakukan dalam metode `format` merupakan pengganti nilai tiap-tiap argumen yang diletakkan dalam ketentuan khusus. Ada ketentuan yang lebih detail seperti:

~~~python
 desimal (.) presisi 3 untuk float '0.333'
>>> '{0:.3}'.format(1/3)
 isi dengan garis bawah (_) dengan teks ditengah 
 (^) to 11 width '___hello___'
>>> '{0:_^11}'.format('hello')
 keyword-based 'Swaroop wrote A Byte of Python'
>>> '{name} wrote {book}'.format(name='Swaroop', book='A Byte of Python')
~~~

## Variable

Using just literal constants can soon become boring - we need some way of storing any information and manipulate them as well. This is where *variables* come into the picture. Variables are exactly what the name implies - their value can vary, i.e.,  you can store anything using a variable. Variables are just parts of your computer's memory where you store some information. Unlike literal constants, you need some method of accessing these variables and hence you give them names.

## Identifier Naming

Variables are examples of identifiers. *Identifiers* are names given to identify *something*. There are some rules you have to follow for naming identifiers:

- The first character of the identifier must be a letter of the alphabet (uppercase ASCII or lowercase ASCII or Unicode character) or an underscore ('_').
- The rest of the identifier name can consist of letters (uppercase ASCII or lowercase ASCII or Unicode character), underscores ('_') or digits (0-9).
- Identifier names are case-sensitive. For example, `myname` and `myName` are **not** the same. Note the lowercase `n` in the former and the uppercase `N` in the latter.
- Examples of *valid* identifier names are `i`, `__my_name`, `name_23`. Examples of ''invalid'' identifier names are `2things`, `this is spaced out`, `my-name`, `>a1b2_c3` and `"this_is_in_quotes"`.

## Data Types

Variables can hold values of different types called **data types**. The basic types are numbers and strings, which we have already discussed. In later chapters, we will see how to create our own types using [classes](#object-oriented-programming).

## Object

Remember, Python refers to anything used in a program as an *object*.  This is meant in the generic sense. Instead of saying 'the *something*', we say 'the *object*'.

Note for Object Oriented Programming users

:   Python is strongly object-oriented in the sense that everything is an object including numbers, strings and functions.

We will now see how to use variables along with literal constants. Save the following example and run the program.

## How to write Python programs

Henceforth, the standard procedure to save and run a Python program is as follows:

#. Open your editor of choice, such as Komodo Edit.
#. Type the program code given in the example.
#. Save it as a file with the filename mentioned.
#. Run the interpreter with the command `python3 program.py` to run the program.

## Example: Using Variables And Literal Constants

~~~python
 Filename : var.py
i = 5
print(i)
i = i + 1
print(i)

s = '''This is a multi-line string.
This is the second line.'''
print(s)
~~~

Output:

~~~
$ python3 var.py
5
6
This is a multi-line string.
This is the second line.
~~~

How It Works:

Here's how this program works. First, we assign the literal constant value `5` to the variable `i` using the assignment operator (`=`). This line is called a statement because it states that something should be done and in this case, we connect the variable name `i` to the value `5`.  Next, we print the value of `i` using the `print` function which, unsurprisingly, just prints the value of the variable to the screen.

Then we add `1` to the value stored in `i` and store it back. We then print it and expectedly, we get the value `6`.

Similarly, we assign the literal string to the variable `s` and then print it.

Note for static language programmers

:   Variables are used by just assigning them a value. No declaration or data type definition is needed/used.

### Logical And Physical Line

A physical line is what you *see* when you write the program. A logical line is what *Python sees* as a single statement. Python implicitly assumes that each *physical line* corresponds to a *logical line*.

An example of a logical line is a statement like `print('Hello World')` - if this was on a line by itself (as you see it in an editor), then this also corresponds to a physical line.

Implicitly, Python encourages the use of a single statement per line which makes code more readable.

If you want to specify more than one logical line on a single physical line, then you have to explicitly specify this using a semicolon (`;`) which indicates the end of a logical line/statement. For example,

~~~python
i = 5
print(i)
~~~

is effectively same as

~~~python
i = 5;
print(i);
~~~

and the same can be written as

~~~python
i = 5; print(i);
~~~

or even

~~~python
i = 5; print(i)
~~~

However, I **strongly recommend** that you stick to **writing a maximum of a single logical line on each single physical line**. The idea is that you should never use the semicolon. In fact, I have *never* used or even seen a semicolon in a Python program.

There is one kind of situation where this concept is really useful : if you have a  long line of code, you can break it into multiple physical lines by using the backslash. This is referred to as **explicit line joining**:

~~~python
s = 'This is a string. \
This continues the string.'
print(s)
~~~

This gives the output:

~~~
This is a string. This continues the string.
~~~

Similarly,

~~~python
print\
(i)
~~~

is the same as

~~~python
print(i)
~~~

Sometimes, there is an implicit assumption where you don't need to use a backslash. This is the case where the logical line has a starting parentheses, starting square brackets or a starting curly braces but not an ending one. This is called **implicit line joining**. You can see this in action when we write programs using [lists](#list) in later chapters.

### Indentation

Whitespace is important in Python. Actually, **whitespace at the beginning of the line is important**. This is called **indentation**. Leading whitespace (spaces and tabs) at the beginning of the logical line is used to determine the indentation level of the logical line, which in turn is used to determine the grouping of statements.

This means that statements which go together **must** have the same indentation. Each such set of statements is called a **block**. We will see examples of how blocks are important in later chapters.

One thing you should remember is that wrong indentation can give rise to errors. For example:

~~~python
i = 5
 print('Value is ', i) # Error! Notice a single space at the start of the line
print('I repeat, the value is ', i)
~~~

When you run this, you get the following error:

~~~
  File "whitespace.py", line 4
    print('Value is ', i) # Error! Notice a single space at the start of the line
    ^
IndentationError: unexpected indent
~~~

Notice that there is a single space at the beginning of the second line. The error indicated by Python tells us that the syntax of the program is invalid i.e. the program was not properly written. What this means to you is that *you cannot arbitrarily start new blocks of statements* (except for the default main block which you have been using all along, of course). Cases where you can use new blocks will be detailed in later chapters such as the [Control Flow](#control-flow).

How to indent

:   Use only spaces for indentation, with a tab stop of 4 spaces. Good editors like Komodo Edit will automatically do this for you. Make sure you use a consistent number of spaces for indentation, otherwise your program will show errors.

Note to static language programmers

:   Python will always use indentation for blocks and will never use braces. Run `from __future__ import braces` to learn more.

## Summary

Now that we have gone through many nitty-gritty details, we can move on to more interesting stuff such as control flow statements. Be sure to become comfortable with what you have read in this chapter.
