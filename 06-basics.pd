# Dasar 

Hanya menampilkan 'Hello World' tentu saja tidak cukup bukan? Anda ingin melakukan sesuatu lebih dari itu - Anda ingin mengambil beberapa masukan, memanipulasinya dan mengeluarkannya dalam bentuk tertentu. Kita dapat melakukan ini di Python dengan menggunakan konstanta dan variabel, dan kita akan belajar konsep ini secara baik di bab ini. 

## Komentar 

*Komentar* adalah teks apa saja yang ada setelah tanda `#` dan utamanya digunakan sebagai catatan untuk pembaca program. 

Sebagai contoh:

~~~python
print('Hello World') # Mohon dicatat bahwa print adalah fungsi 
~~~

atau:

~~~python
# Mohon dicatat bahwa print adalah fungsi 
print('Hello World')
~~~

Gunakan komentar yang bermanfaat di dalam program sebanyak mungkin yang Anda bisa untuk:

- menjelaskan asumsi
- menjelaskan keputusan penting
- menjelaskan detail yang penting 
- menjelaskan masalah yang Anda coba pecahkan
- menjelaskan masalah yang Anda coba atasi di dalam program, dll.

[*Kode menunjukkan bagaimana, sedangkan komentar menunjukkan kepada Anda mengapa.*](http://www.codinghorror.com/blog/2006/12/code-tells-you-how-comments-tell-you-why.html)

Hal ini bermanfaat bagi pembaca program Anda sehingga mereka dapat memahami dengan mudah apa yang sedang dikerjakan oleh program. Ingat, bahwa orang yang membaca tersebut bisa jadi Anda sendiri 6 bulan kemudian.

## Konstanta Literal 

Contoh konstanta literal adalah nomor seperti `5`, `1.23`, atau string seperti `'Ini adalah string'` atau `"Ini, adalah string!"`. Disebut sebagai literal karena ia memang *literal* - Anda dapat menggunakan nilainya sebagaimana yang dituliskan (secara literal). Angka `2` selalu merepresentasikan dirinya sendiri, dan bukan hal lain - Ia merupakan *konstanta* karena nilainya tidak dapat diganti. Inilah kenapa semua ini disebut sebagai konstanta literal.

## Nomor 

Nomor biasanya digunakan untuk dua jenis - integer dan float.

Contoh sebuah integer adalah `2` di mana semuanya adalah angka.

Contoh dari angka floating point (atau sering disebut *float*) adalah `3.23` dan `52.3E-4`. Notasi `E` mengindikasikan basis 10. Dalam hal ini, `52.3E4` merarti `52.3 * 10^-4^`.

Catatan untuk Programmer Berpengalaman

:   Tidak ada pembedaan untuk tipe `long`. Tipe `int` dapat digunakan sebagai integer dalam ukuran berapapun.

## String 

String adalah urutan *karakter*. String pada dasarnya adalah kumpulan kata-kata.

Anda akan menggunakan string di hampir setiap program Python yang Anda tulis, jadi perhatikan baik-baik bagian berikut ini.

### Tanda Kutip

Anda dapat menetukan string dengan tanda kutip seperti `'Kutip saya di sini'`. Setiap spasi kosong seperti spasi dan tab akan ditampilkan sebagaimana adanya.

### Kutip Ganda

String dalam kutip ganda akan bekerja mirip seperti tanda kutip tunggal. Sebagai contoh `"Siapa nama Anda?"`

### Kutip Tiga

Anda dapat menetukan string lebih dari satu baris dengan menggunakan kutip tiga - (`"""` atau `'''`). Anda dapat menggunakan tanda kutip dan kutip ganda secara bebas di dalam kutip tiga. Sebagai contoh:

~~~python
'''Ini adalah string lebih dari satu baris. Ini adalah baris pertama.
Ini baris kedua.
"Siapa nama Anda?," Tanyaku.
Dia bilang "Bond, James Bond."
'''
~~~

### String bersifat Abadi (Immutable) 

Ini berarti sekali Anda membuat string, Anda tidak dapat mengubahnya. Meskipun ini terlihat jelek, tapi sebetulnya tidak. Kita akan melihat kenapa hal ini bukanlah batasan di beberapa program yang akan kita lihat kemudian.

Catatan untuk Programmer C/C++ 

:   Tidak ada pemisahan tipe data `char` di Python. Hal itu tidak diperlukan dan saya yakin Anda tidak akan merasa kehilangannya.

Catatan untuk Programmer Perl/PHP 

:   Ingat bahwa string bertanda kutip tunggal maupun ganda, adalah sama - mereka tidak berbeda sama sekali.

### Metode Format 

Kadang kita ingin menyusun string dari informasi lain. Ini tempat di mana metode `format()` berguna.

Simpan baris berikut sebagai berkas bernama `str_format.py`:

~~~python
usia = 20
nama = 'Swaroop'

print('{0} masih {1} tahun ketika dia menulis buku ini'.format(name, age))
print('Kenapa {0} bermain-main dengan python?'.format(name))
~~~

Keluaran:

~~~
$ python3 str_format.py
Swaroop masih 20 tahun ketika dia menulis buku ini
Kenapa Swaroop bermain-main dengan python?
~~~

Bagaimana Cara Kerjanya:

String menggunakan ketentuan khusus, dan dapat diulang, metode *format* dapat dipanggil untuk menggantikan argumen yang ada di dalam format.

Coba perhatikan penggunaan pertama, di mana kita menggunakan `{0}` dan ini terkait dengan variabel `nama` yang merupakan argumen pertama dari metode `format`. Dan selanjutnya juga mirip, ketentuan berikutnya adalah `{1}` yang tersambung ke `usia` yang merupakan arguman kedua dari metode format. Mohon dicatat bahwa Python mulai penghitungan dari 0 yang berarti posisi pertama dalam indeks ini adalah 0, dan kedua adalah indeks 1 dan seterusnya.

Mohon perhatikan bahwa kita dapat memperoleh hasil yang sama dengan penggabungan string (string concatenation): `nama + ' berusia ' + str(usia) + ' tahun'` tapi ini lebih jelek dan lebih banyak kemungkinan salah. Kedua, konversi ke string dapat dilakukan secara otomatis lewat metode `format` daripada konversi eksplisit ke dalam string yang dibutuhkan dalam kasus ini. Ketiga, kita dapat menggunakan metode `format`, kita dapat mengubah pesan tanpa harus berurusan bagaimana variable tersebut digunakan dan sebaliknya.

Juga catat bahwa nomor tersebut sifatnya pilihan, jadi Anda dapat menuliskannya dengan:

~~~python
usia = 20
nama = 'Swaroop'

print('{} masih {} tahun ketika dia menulis buku ini'.format(name, age))
print('Kenapa {} bermain-main dengan python?'.format(name))
~~~

yang akan menghasilkan output yang sama persis dengan program sebelumnya.

Apa yang Python lakukan dalam metode `format` merupakan pengganti nilai tiap-tiap argumen yang diletakkan dalam ketentuan khusus. Ada ketentuan yang lebih detail seperti:

~~~python
 desimal (.) presisi 3 untuk float '0.333'
>>> '{0:.3}'.format(1/3)
 isi dengan garis bawah (_) dengan teks ditengah 
 (^) dengan panjang 11 '___halo___'
>>> '{0:_^11}'.format('halo')
 basis-kata kunci 'Swaroop menulis A Byte of Python'
>>> '{nama} menulis {buku}'.format(nama='Swaroop', buku='A Byte of Python')
~~~

## Variabel

Penggunaan konstanta literal segera membuat kita bosan - kita ingin mencari cara bagaimana menyimpan informasi dan juga memanipulasinya. Segera sesuatu bernama *variabel* muncul dalam bayangan. Variabel persei seperti namanya - nilainya sangat beragam, dengan kata lain Anda dapat menyimpan apa saja dengan menggunakan variabel. Variabel seetulnya hanyalah merupakan bagian dari memori komputer tempat Anda menyimpan beberapa informasi. Tidak seperti konstanta literal, Anda perlu beberapa metode untuk mengakses nilai variabel ini, sehingga Anda perlu menamainya.

## Nama Penunjuk Identitas 

Variabiel adalah contoh penunjuk identitas. *Penunjuk Identitas* disematkan untuk suatu nama yang memberikan identitas terhadap *sesuatu*. Ada beberapa aturan yang harus diikuti untuk memberi nama identitas.

- Karakter pertama dari identitas harus huruf (huruf besar ASCII atau huruf kecil ASCII atau karakter Unicode) atau garis bawah ('_')
- Karakter sisa dari nama penanda identtitas dapat terdiri dari huruf (huruf besar ASCII atau huruf kecil ASCII atau karakter Unicode), garis bawah ('_') atau digit (0-9).
- Penanda identitas bersifat case-sensitive (peka terhadap huruf besar dan kecil). Sebagai contoh, `namaku` dan `Namaku` *tidak sama*. Perhatikan huruf kecil `n` pada kata pertama dan huruf besar `N` pada kata kedua.
- Contoh dari penanda identitas yang *valid* adalah `i`, `__nama_ku`,`nama_23`. Contoh penanda identitas yang ''invalid'' adalah `2hal`,`ini dengan spasi`,`nama-ku`,`>a1b2_c3` dan `"ini_dalam_tanda_kutip"`.

## Tipe Data 

Variabel dapat menyimpan nilai dari jenis data yang berbeda-beda yang dinamakan **tipe data**. Tipe dasarnya adalah nomor dan string, yang kita sudah diskusikan sebelumnya. Di bab berikutnya, kita akan lihat bagaimana menciptakan data tipe kita sendiri dengan menggunakan [classes](#object-oriented-programming).

## Obyek

Ingat, Python mereferensikan segala sesuatu yang digunakan di dalam program sebagai *obyek*. Ini hanya dimaksudkan dalam perasaan umum saja. Alih-alih menyebut '*sesuatu*' kita sebut '*obyek*'.

Catatn untuk pengguna Pemrograman Berorientasi Obyek (Object Oriented Programming) 

:   Python sangat kuat di dalam object-oriented dalam kaitan segala sesuatu adalah obyek termasuk nomor, string dan fungsi.

Kita akan melihat bagaimana menggunakan variabel sejalan dengan konstanta literal. Simpan contoh berikut dan jalankan programnya.

## Bagaimana menulis program Python

Cara yang baku untuk menyimpan dan menjalankan program Python adalah seperti ini:

#. Buka editor pilihan Anda, seperti Komodo Edit.
#. Ketik kode porgram seperti yang diberikan dalam contoh.
#. Simpan sebagai berkas dengan nama seperti yang disebutkan.
#. Jalankan interpreter dengan perintah `python3 program.py` untuk menjalankan program

## Contoh: Menggunakan Variabel dan Konstanta Literal.

~~~python
 Filename : var.py
i = 5
print(i)
i = i + 1
print(i)

s = '''Ini adalah string dengan baris lebih dari satu.
Ini baris kedua.'''
print(s)
~~~

Keluaran:

~~~
$ python3 var.py
5
6
Ini adalah string dengan baris lebih dari satu.
Ini baris kedua.
~~~

Bagaimana cara kerjanya:

Berikut bagaimana program tersebut bekerja. Pertama, kita tentukan nilai konstanta literalnya `5` ke dalam variabel `i` lewat penentuan operator (`=`). Baris ini disebut statemen/pernyataan sebab menyatakan sesuatu yang harus dikerjakan  dan dalam kasus ini, kita menghubungkan variabel bernama `i` dengan nilai `5`. Kemudian kita menampilkan nilai `i` dengan fungsi `print` yang secara mengejutkan hanya menampilkan nilai variabel ke dalam layar.

Kemudian kita menambahkan `1` ke dalam nilai yang disimpan di dalam `i` dan menyimpannya lagi. Kemudian kita menampilkannya lagi, dan seperti yang sudah kita duga, kita mendapatkan nilai `6`.

Berikutnya juga mirip, kita menentikan string literal ke dalam variabel `s` lalu menampilkannya.

Catatan untuk programmer bahasa satatik

:   Variabel digunakan hanya untuk memberikan nilai terhadapnya. Tidak perlu menggunakan deklarasi atau definisi tipe data.

### Baris Logis dan Fisik

Baris fisik adalah apa yang Anda *lihat* saat Anda menulis program. Sedangkan baris logis adalah apa yang *Python lihat* sebagai suatu statemen tunggal. Python secara implisit mengasumsikan bahwa setiap *baris fisik* berhubungan dengan *baris logis*.

Sebagai contoh baris logis dalam statemen seperti `print('Hello World')` - jika ini berada dalam satu baris dirinya sendiri (sebagaimana yang Anda lihat di editor), maka ini juga berhubungan dengan baris fisik.

Secara implisit, Python mendorong penggunaan statemen tunggal per baris yang dapat membuat kode lebih terbaca.

Jika Anda ingin menentukan lebih dari satu baris logis dalam satu baris fisik, Anda harus secara spesifik menentukannya dalam titik koma (`;`) yang mengindikasikan akhir dari baris logis/statemen. SSebagai contoh,

~~~python
i = 5
print(i)
~~~

is effectively same as

~~~python
i = 5;
print(i);
~~~

and the same can be written as

~~~python
i = 5; print(i);
~~~

or even

~~~python
i = 5; print(i)
~~~

However, I **strongly recommend** that you stick to **writing a maximum of a single logical line on each single physical line**. The idea is that you should never use the semicolon. In fact, I have *never* used or even seen a semicolon in a Python program.

There is one kind of situation where this concept is really useful : if you have a  long line of code, you can break it into multiple physical lines by using the backslash. This is referred to as **explicit line joining**:

~~~python
s = 'This is a string. \
This continues the string.'
print(s)
~~~

This gives the output:

~~~
This is a string. This continues the string.
~~~

Similarly,

~~~python
print\
(i)
~~~

is the same as

~~~python
print(i)
~~~

Sometimes, there is an implicit assumption where you don't need to use a backslash. This is the case where the logical line has a starting parentheses, starting square brackets or a starting curly braces but not an ending one. This is called **implicit line joining**. You can see this in action when we write programs using [lists](#list) in later chapters.

### Indentation

Whitespace is important in Python. Actually, **whitespace at the beginning of the line is important**. This is called **indentation**. Leading whitespace (spaces and tabs) at the beginning of the logical line is used to determine the indentation level of the logical line, which in turn is used to determine the grouping of statements.

This means that statements which go together **must** have the same indentation. Each such set of statements is called a **block**. We will see examples of how blocks are important in later chapters.

One thing you should remember is that wrong indentation can give rise to errors. For example:

~~~python
i = 5
 print('Value is ', i) # Error! Notice a single space at the start of the line
print('I repeat, the value is ', i)
~~~

When you run this, you get the following error:

~~~
  File "whitespace.py", line 4
    print('Value is ', i) # Error! Notice a single space at the start of the line
    ^
IndentationError: unexpected indent
~~~

Notice that there is a single space at the beginning of the second line. The error indicated by Python tells us that the syntax of the program is invalid i.e. the program was not properly written. What this means to you is that *you cannot arbitrarily start new blocks of statements* (except for the default main block which you have been using all along, of course). Cases where you can use new blocks will be detailed in later chapters such as the [Control Flow](#control-flow).

How to indent

:   Use only spaces for indentation, with a tab stop of 4 spaces. Good editors like Komodo Edit will automatically do this for you. Make sure you use a consistent number of spaces for indentation, otherwise your program will show errors.

Note to static language programmers

:   Python will always use indentation for blocks and will never use braces. Run `from __future__ import braces` to learn more.

## Summary

Now that we have gone through many nitty-gritty details, we can move on to more interesting stuff such as control flow statements. Be sure to become comfortable with what you have read in this chapter.
