# Struktur Data

Struktur data pada dasarnya merupakan *struktur* yang dapat menyimpan *data* secara bersama-sama. Dengan kata lain, mereka digunakan untuk menyimpan koleksi data yang berkaitan satu sama lain.

Ada empat struktur data built-in di Python - list, tuple, dictionary dan set. Kita akan lihat bagaimana penggunaan masing-masing dan bagaimana struktur data tersebut dapat mempermudah hidup kita. 

## List 

`list` adalah struktur data yang meyimpan koleksi item yang ditempatkan secara berurut. Misalnya Anda dapat menyimpan item *berurut(sequence)* di dalam list. Hal itu sangat mudah dimengerti jika Anda dapat membayangkan daftar belanja, di mana Anda punya daftar item yang harus dibeli. Namun jika di daftar belanja Anda membariskan item dengan baris baru, di Python Anda cukup meletakkan koma di antaranya. 

Penulisan list harus diapit dalam tanda kurung kotak (square bracket), sehingga Python dapat memahami bahwa Anda sedang membuat list. Sekali Anda buat list, Anda dapat menambah, menghapus atau mencari item di dalam list. Karena kita bisa menambah dan menguranginya, kita dapat katakan bahwa list termasuk tipe data *mutable* - yang berarti nilainya bisa diganti. 

### Pengenalan Singkat Object (Obyek) dan Classes (Kelas) 

Meskipun saya menunda pembahasan tentang object dan class hingga sekarang, saat ini penjelasan sedikit dibutuhkan sehingga Anda dapat memahami list secara lebih baik. Kita akan mengeksplorasi topik ini secara lebih detail di [bab berikutnya](#pemrograman-berbasis-obyek). 

List adalah contoh yang bisa dipahami tentang penggunaan object dan class. Ketika kita menggunakan variabel bernama `i` dan memberi nilai terhadap variabel tersebut, misalnya integer `5`, Anda dapat berpikir membuat **object** (berupa instance) `i` dari **class** (berupa tipe) `int`. Sebagai bantuan, Anda dapat membaca `help(int)` untuk memahaminya lebih baik. 

Sebuah class juga memiliki **methods/metode** berupa fungsi yang didefinisikan khusus hanya untuk class tersebut. Anda dapat menggunakan fungsi bagian ini, jika dan hanya jika Anda mendeklarasikan obyek dari class tersebut. Sebagai contoh, Python memberikan metode `append` untuk class `list` yang memungkinkan Anda menambah item di akhir list. Misalnya `listku.append('sesuatu') yang akan menambahkan string tersebut (sesuatu) di akhir `listku`. Perhatikan penggunaan notasi bertitik untuk mengakses method dari sebuah object.

Sebuah class juga punya **fields** yang merupakan variabel tapi hanya digunakan untuk class tersebut. Anda dapat menggunakan variabel atau nama ini, hanya ketika Anda mendeklarasikan obyek dari kelas tersebut. Fields juga diakses lewat notasi bertiti, sebagai contoh, `listku.field`.

Contoh (simpan dengan nama `menggunakan_list.py`):

~~~python
# Berikut adalah daftar belanja saya
daftarbelanja = ['apel', 'mangga', 'wortel', 'pisang']

print('Saya memiliki ', len(daftarbelanja), ' barang untuk dibeli.')

print('Barang tersebut adalah:', end=' ')
for item in daftarbelanja:
    print(item, end=' ')

print('\nSaya juga harus membeli beras.')
daftarbelanja.append('beras')
print('Daftar belanja saya sekarang', shoplist)

print('Saya akan mengurutkan daftar saya sekarang')
daftarbelanja.sort()
print('Daftar belanja yang sudah diurutkan adalah', shoplist)

print('Barang pertama yang akan saya beli adalah', shoplist[0])
olditem = daftarbelanja[0]
del daftarbelanja[0]
print('Saya telah membeli', olditem)
print('Daftar belanja saya sekarang ', daftarbelanja)
~~~

Keluaran:

~~~
$ python3 menggunakan_list.py
Saya memiliki 4 barang untuk dibeli.
Barang tersebut adalah: apel mangga wortel pisang
Saya juga harus membeli beras.
Daftar belanja saya sekarang ['apel', 'mangga', 'wortel', 'pisang', 'beras']
Saya akan mengurutkan daftar saya sekarang
Daftar belanja yang sudah diurutkan adalah ['apel', 'beras', 'mangga', 'pisang', 'wortel']
Barang pertama yang akan saya beli adalah apel
Saya telah membeli apel
Daftar belanja saya sekarang ['beras', 'mangga', 'pisang', 'wortel']
~~~

Bagaimana Cara Kerjanya:

Variabel `daftarbelanja` adalah daftar belanja seseorang yang akan pergi ke pasar. Di dalam `daftarbelanja`, kita hanya menyimpan nama string yang akan dibeli, tapi Anda dapat menambahkan *segala macam jenis obyek* ke dalam daftar, termasuk angka, bahkan bisa juga list lainnya. 

Kita juga dapat menggunakan putaran `for..in` untuk mengulangi seluruh item di dalam list. Sekarang, harusnya Anda juga sudah mulai memahami bahwa list juga merupakan urutan (sequence). Kekhususan dari sequence akan didiskusikan di [bagian berikutnya](#sequence). 

Perhatikan bahwa argumen keyword `end` di dalam fungsi `print` mengindikasikan bahwa kita ingin outputnya diakhiri dengan spasi daripada baris baru seperti biasanya. 

Berikutnya, kita menambahkan item ke dalam list dengan menggunakan metode `append` ke dalam object list, sebagaimana telah didiskusikan sebelumnya. Lalu kita periksa apakah itemnya sudah dimasukkan ke dalam list atau belum dengan mencetaknya ke layar dengan rapi, cukup dengan memberikan perintah `print`. 

Lalu kita sortir listnya dengan menggunakan metode `sort`. Penting untuk dipahami bahwa metode ini akan berpengaruh ke dalam listnya sendiri, dan tidak akan mengembalikan list yang telah dimodifikasi. Hal ini berbeda dengan cara kerja string. Ini kenapa list disebut sebagai *mutable* sedangkan string disebut *immutable*.

Selanjutnya, ketika kita selesai belanja di pasar, kita akan menghapus item yang sudah dibeli dari daftar. Ini dapat dilakukan dengan menggunakan perintah `del`. Di sini cukup dimasukkan item-item yang akan dihapus, statemen `del` akan menghapuskannya untuk kita. Kita menentukan item pertama dari daftar yang akan dihapus mulai dari 0, sehingga perintahnya adalah `del shoplist[0]` (ingat bahwa Python selalu mulai penghitungan dari 0). 

Jika Anda ingin tahu semua metode yang didefinisikan oleh object list, ketikkan `help(list)` dari konsol python untuk detailnya. 

## Tuple 

Tuples digunakan untuk menyimpan object lebih dari satu secara bersamaan. Bayangkan hal ini mirip dengan list, tapi tanpa fungsi yang diberikan class list untuk Anda. Salah satu fitur tuples adalah **immutable** seperti string. Dengan kata lain Anda tidak bisa modifikasi tuples. 

Tuples didefinisikan dengan menentukan item dipisahkan oleh koma, dengan tambahan pilihan dalam kurung (tidak wajib). 

Tuples biasanya digunakan dalam kasus di mana sebuah statemen atau fungsi yang didefinisikan sendiri dapat berasumsi bahwa nilai di dalamnya tidak berubah. Atau dengan kata lain nilai dari sebuah tuple tidak akan pernah berubah. 

Contoh (simpan dengan nama `menggunakan_tuple.py`):

~~~python
bonbin = ('piton', 'gajah', 'penguin') # ingat bahwa tanda kurung tidak wajib
print('Hewan di kebon binatang berjumlah ', len(bonbin))

bonbin_baru = 'monyet', 'onta', bonbin
print('Kerangkeng di kebun binatang baru berjumlah ', len(bonbin_baru))
print('Semua binatang di kebun binatang terdiri', bonbin_baru)
print('Binatang yang dibawa dari kebun binatang lama adalah ', bonbin_baru[2])
print('Binatang terakhir yang dibawa dari kebun binatang lama adalah', bonbin_baru[2][2])
print('Jumlah seluruh binatang adalah', len(bonbin_baru)-1+len(bonbin_baru[2]))
~~~

Keluaran:

~~~
$ python3 using_tuple.py
Hewan di kebon binatang berjumlah 3
Kerangkeng di kebun binatang baru berjumlah 3
Semua binatang di kebun binatang terdiri ('monyet', 'onta', ('piton', 'gajah', 'penguin'))
Binatang yang dibawa dari kebun binatang lama adalah  ('piton', 'gajah', 'penguin')
Binatang terakhir yang dibawa dari kebun binatang lama adalah penguin
Jumlah seluruh binatang adalah 5

~~~

Bagaimana Cara Kerjanya:

Variabel `bonbin` merujuk pada sebuah tuple. Kita lihat bahwa fungsi `len` dapat digunakan untuk mencari panjang sebuah tuple. Ini juga mengindikasikan bahwa tuple juga merupakan [sequence](#sequence).

Kita sekarang memindahkan binatang-binatang ini ke dalam kebun binatang baru mengingat kebun binatang lama sudah ditutup. Sehingga, tuple `bonbin_baru` berisi binatang-binatang yang sebelumnya sudah ada, dan binatang yang dibawa dari kebon binatang lama. Kembali ke dunia nyata, catat bahwa tuple di dalam tuple tidak pernah kehilangan identitas. 

Kita dapat mengakses item di dalam tuple, dengan menyebutkan posisi item di dalam tanda kurung kotak sebagaimana yang telah kita lakukan terhadap lists. Ini dinamakan operator *indexing*. Kita mengakses item ketiga dari `bonbin_baru` dengan menyebutkan `bonbin_baru[2]` dan kita mengakses item ketiga di dalam item ketiga tuple `bonbin_baru` dengan menyebutkan `bonbin_baru[2][2]`. Ini cukup mudah jika Anda memahami idiomnya. 

Tanda Dalam Kurung (parentheses)

:   Meskipun dalam kurung tidak bersifat wajib, Saya lebih anjurkan untuk selalu menggunakannya, untuk menunjukkan hal tersebut adalah tuple. Hal ini menghindari ambiguitas. Sebagai contoh `print(1,2,3)` dan `print( (1,2,3) )` memiliki arti yang berbeda - di mana print yang pertama menetak tiga angka, sedangkan print kedua mencetak sebuah tuple (yang berisi tiga angka). 

Tuple dengan item 0 atau 1

:   Sebuah tuple kosong dibuat dari tanda kurung kosong, seperti misalnya `kosong = ()`. Bagaimanapun juga, tuple dengan satu item tidak sesederhana itu. Anda harus menyebutkannya dengan koma diikuti dengan item pertama (dan satu-satunya) sehingga Python dapat membedakan antara tuple dengan tanda kurung berpasangan yang mengelilingi ekspresi obyek. Anda harus menyebutkan `singleton = (2,)` jika Anda ingin membuat sebuah tuple yang berisi angka `2`.

Catatan untuk programmer Perl

:   Sebuah list di dalam list tidak akan kehilangan identitas, dengan kata lain list tidak disatukan sebagaimana di dalam Perl. Ini juga berlaku untuk tuple di dalam tuple, atau list di dalam tuple dan seterusnya. Sejauh yang diperhatikan oleh Python, mereka hanyalah objects yang menyimpan objects lainnya. Tidak ada pertimbangan lain.

## Pustaka 

Pustaka (_dictionary_) seperti buku-alamat di mana Anda dapat menemukan alamat atau detail kontak seseorang hanya dengan mengetahui namanya. Dengan kata lain kita asosiasikan **kunci** atau **keys** (nama) dengan **nilai** atau **value** (informasi detail). Perlu dicatat bahwa kunci dalam sebuah pustaka haruslah unik dan Anda tidak dapat menemukan informasi yang benar jika dua orang punya nama yang sama. 

Mohon dicatat bahwa Anda hanya dapat menggunakan _immutable objects_ (obyek yang tidak bisa dimutasi/diubah jenisnya seperti string) untuk kunci sebuah pustaka namun Anda dapat menggunakan obyek yang bisa berubah bentuk (_mutable object_) maupun obyek yang tidak bisa berubah bentuk (_immutable objects_). Dengan kata lain Anda seharusnya menggunakan obyek yang sederhana untuk kunci. 

Pasangan kunci dan nilainya yang digunakan dalam pustaka mengunakan notasi `d = {kunci1: nilai1, kunci2:nilai2}`. Perhatikan bahwa pasangan kunci-nilai dipisahkan dengan titik dua dan pasangan tersebut dipisahkan dengan koma hingga ditutup dengan kurung kurawal penutup.

Perlu diingat bahwa pasangan kunci-nilai di dalam pustaka tidak bisa diurutkan. Jika Anda ingin mengurutkannya secara khusus, Anda harus malkukan pengurutan (_sort_) sebelum menggunakannya. 

Pusaka yang Anda gunakan merupakan _instance_/obyek dari kelas `dict`. 

Contoh (simpan dengan nama `menggunakan_pustaka.py`):

~~~python
# 'ba' adalah kepanjangan dari 'b'uku 'a'lamat 

ba = {  'Swaroop'   : 'swaroop@swaroopch.com',
        'Larry'     : 'larry@wall.org',
        'Matsumoto' : 'matz@ruby-lang.org',
        'Spammer'   : 'spammer@hotmail.com'
    }

print("Alamat email Swaroop adalah ", ba['Swaroop'])

# Menghapus pasangan kunci-nilai
del ba['Spammer']

print('\nAda {0} kontak di buku alamat\n'.format(len(ba)))

for nama, alamat in ba.items():
    print('Kontak {0} memiliki alamat {1}'.format(name, address))

# Menambahkan pasangan kunci-nilai
ba['Guido'] = 'guido@python.org'

if 'Guido' in ba:
    print("\nAlamat email Guido adalah ", ab['Guido'])
~~~

Keluaran:

~~~
$ python3 menggunakan_pustaka.py
Alamat email Swaroop adalah swaroop@swaroopch.com

Ada 3 kontak di buku alamat

Kontak Swaroop memiliki alamat swaroop@swaroopch.com
Kontak Matsumoto memiliki alamat matz@ruby-lang.org
Kontak Larry memiliki alamat larry@wall.org

Alamat email Guido adalah guido@python.org
~~~

Bagaimana Cara Kerjanya:

Kita membuat pustaka `ba` dengan notasi yang telah kita diskusikan sebelumnya. Lalu kita mengakses pasangan nilai-kunci dengan menyebutkan kunci dengan menggunakan operator indeks sesuai yang telah didiskusikan dalam konteks lists dan tuples. Coba teliti sintaks sederhananya. 

Kita dapat menghapus pasangan kunci-nilai dengan menggunakan teman lama kita, statemen `del`. Kita cukup menyebut nama pustaka dan operator indeks sebagai kunci dan memberikannya pada statemen `del`. Nilainya tidak perlu kita ketahui untuk menjalankan perintah ini. 

Next, we access each key-value pair of the dictionary using the `items` method of the dictionary which returns a list of tuples where each tuple contains a pair of items - the key followed by the value. We retrieve this pair and assign it to the variables `name` and `address` correspondingly for each pair using the `for..in` loop and then print these values in the for-block.

We can add new key-value pairs by simply using the indexing operator to access a key and assign that value, as we have done for Guido in the above case.

We can check if a key-value pair exists using the `in` operator.

For the list of methods of the `dict` class, see `help(dict)`.

Keyword Arguments and Dictionaries

:   On a different note, if you have used keyword arguments in your functions, you have already used dictionaries! Just think about it - the key-value pair is specified by you in the parameter list of the function definition and when you access variables within your function, it is just a key access of a dictionary (which is called the *symbol table*in compiler design terminology).

## Sequence 

Lists, tuples and strings are examples of sequences, but what are sequences and what is so special about them?

The major features are **membership tests**, (i.e. the `in` and `not in` expressions) and **indexing operations**, which allow us to fetch a particular item in the sequence directly.

The three types of sequences mentioned above - lists, tuples and strings, also have a **slicing** operation which allows us to retrieve a slice of the sequence i.e. a part of the sequence.

Example (save as `seq.py`):

~~~python
shoplist = ['apple', 'mango', 'carrot', 'banana']
name = 'swaroop'

# Indexing or 'Subscription' operation
print('Item 0 is', shoplist[0])
print('Item 1 is', shoplist[1])
print('Item 2 is', shoplist[2])
print('Item 3 is', shoplist[3])
print('Item -1 is', shoplist[-1])
print('Item -2 is', shoplist[-2])
print('Character 0 is', name[0])

# Slicing on a list
print('Item 1 to 3 is', shoplist[1:3])
print('Item 2 to end is', shoplist[2:])
print('Item 1 to -1 is', shoplist[1:-1])
print('Item start to end is', shoplist[:])

# Slicing on a string
print('characters 1 to 3 is', name[1:3])
print('characters 2 to end is', name[2:])
print('characters 1 to -1 is', name[1:-1])
print('characters start to end is', name[:])
~~~

Output:

~~~
$ python3 seq.py
Item 0 is apple
Item 1 is mango
Item 2 is carrot
Item 3 is banana
Item -1 is banana
Item -2 is carrot
Character 0 is s
Item 1 to 3 is ['mango', 'carrot']
Item 2 to end is ['carrot', 'banana']
Item 1 to -1 is ['mango', 'carrot']
Item start to end is ['apple', 'mango', 'carrot', 'banana']
characters 1 to 3 is wa
characters 2 to end is aroop
characters 1 to -1 is waroo
characters start to end is swaroop
~~~

How It Works:

First, we see how to use indexes to get individual items of a sequence. This is also referred to as the *subscription operation*. Whenever you specify a number to a sequence within square brackets as shown above, Python will fetch you the item corresponding to that position in the sequence. Remember that Python starts counting numbers from 0. Hence, `shoplist[0]` fetches the first item and `shoplist[3]` fetches the fourth item in the `shoplist`sequence.

The index can also be a negative number, in which case, the position is calculated from the end of the sequence. Therefore, `shoplist[-1]` refers to the last item in the sequence and `shoplist[-2]` fetches the second last item in the sequence.

The slicing operation is used by specifying the name of the sequence followed by an optional pair of numbers separated by a colon within square brackets. Note that this is very similar to the indexing operation you have been using till now. Remember the numbers are optional but the colon isn't.

The first number (before the colon) in the slicing operation refers to the position from where the slice starts and the second number (after the colon) indicates where the slice will stop at. If the first number is not specified, Python will start at the beginning of the sequence. If the second number is left out, Python will stop at the end of the sequence. Note that the slice returned *starts* at the start position and will end just before the *end* position i.e. the start position is included but the end position is excluded from the sequence slice.

Thus, `shoplist[1:3]` returns a slice of the sequence starting at position 1, includes position 2 but stops at position 3 and therefore a *slice* of two items is returned.  Similarly, `shoplist[:]` returns a copy of the whole sequence.

You can also do slicing with negative positions. Negative numbers are used for positions from the end of the sequence. For example, `shoplist[:-1]` will return a slice of the sequence which excludes the last item of the sequence but contains everything else.

You can also provide a third argument for the slice, which is the *step* for the slicing (by default, the step size is 1):

~~~
>>> shoplist = ['apple', 'mango', 'carrot', 'banana']
>>> shoplist[::1]
['apple', 'mango', 'carrot', 'banana']
>>> shoplist[::2]
['apple', 'carrot']
>>> shoplist[::3]
['apple', 'banana']
>>> shoplist[::-1]
['banana', 'carrot', 'mango', 'apple']
~~~

Notice that when the step is 2, we get the items with position 0, 2, ... When the step size is 3, we get the items with position 0, 3, etc.

Try various combinations of such slice specifications using the Python interpreter interactively i.e. the prompt so that you can see the results immediately. The great thing about sequences is that you can access tuples, lists and strings all in the same way!

## Set 

Sets are *unordered* collections of simple objects. These are used when the existence of an object in a collection is more important than the order or how many times it occurs.

Using sets, you can test for membership, whether it is a subset of another set, find the intersection between two sets, and so on.

~~~
>>> bri = set(['brazil', 'russia', 'india'])
>>> 'india' in bri
True
>>> 'usa' in bri
False
>>> bric = bri.copy()
>>> bric.add('china')
>>> bric.issuperset(bri)
True
>>> bri.remove('russia')
>>> bri & bric # OR bri.intersection(bric)
{'brazil', 'india'}
~~~

How It Works:

The example is pretty much self-explanatory because it involves basic set theory mathematics taught in school.

## References 

When you create an object and assign it to a variable, the variable only *refers* to the object and does not represent the object itself! That is, the variable name points to that part of your computer's memory where the object is stored. This is called **binding** the name to the object.

Generally, you don't need to be worried about this, but there is a subtle effect due to references which you need to be aware of:

Example (save as `reference.py`):

~~~python
print('Simple Assignment')
shoplist = ['apple', 'mango', 'carrot', 'banana']
mylist = shoplist # mylist is just another name pointing to the same object!

del shoplist[0] # I purchased the first item, so I remove it from the list

print('shoplist is', shoplist)
print('mylist is', mylist)
# notice that both shoplist and mylist both print the same list without
# the 'apple' confirming that they point to the same object

print('Copy by making a full slice')
mylist = shoplist[:] # make a copy by doing a full slice
del mylist[0] # remove first item

print('shoplist is', shoplist)
print('mylist is', mylist)
# notice that now the two lists are different
~~~

Output:

~~~
$ python3 reference.py
Simple Assignment
shoplist is ['mango', 'carrot', 'banana']
mylist is ['mango', 'carrot', 'banana']
Copy by making a full slice
shoplist is ['mango', 'carrot', 'banana']
mylist is ['carrot', 'banana']
~~~

How It Works:

Most of the explanation is available in the comments.

Remember that if you want to make a copy of a list or such kinds of sequences or complex objects (not simple *objects* such as integers), then you have to use the slicing operation to make a copy. If you just assign the variable name to another name, both of them will ''refer'' to the same object and this could be trouble if you are not careful.

Note for Perl programmers

:   Remember that an assignment statement for lists does **not** create a copy. You have to use slicing operation to make a copy of the sequence.

## More About Strings 

We have already discussed strings in detail earlier. What more can there be to know?  Well, did you know that strings are also objects and have methods which do everything from checking part of a string to stripping spaces!

The strings that you use in program are all objects of the class `str`.  Some useful methods of this class are demonstrated in the next example. For a complete list of such methods, see `help(str)`.

Example (save as `str_methods.py`):

~~~python
name = 'Swaroop' # This is a string object

if name.startswith('Swa'):
    print('Yes, the string starts with "Swa"')

if 'a' in name:
    print('Yes, it contains the string "a"')

if name.find('war') != -1:
    print('Yes, it contains the string "war"')

delimiter = '_*_'
mylist = ['Brazil', 'Russia', 'India', 'China']
print(delimiter.join(mylist))

~~~

Output:

~~~
$ python3 str_methods.py
Yes, the string starts with "Swa"
Yes, it contains the string "a"
Yes, it contains the string "war"
Brazil_*_Russia_*_India_*_China
~~~

How It Works:

Here, we see a lot of the string methods in action. The `startswith` method is used to find out whether the string starts with the given string. The `in` operator is used to check if a given string is a part of the string.

The `find` method is used to locate the position of the given substring within the string; `find` returns -1 if it is unsuccessful in finding the substring. The `str` class also has a neat method to `join` the items of a sequence with the string acting as a delimiter between each item of the sequence and returns a bigger string generated from this.

## Summary 

We have explored the various built-in data structures of Python in detail. These data structures will be essential for writing programs of reasonable size.

Now that we have a lot of the basics of Python in place, we will next see how to design and write a real-world Python program.
