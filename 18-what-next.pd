# Apa Berikutnya 

Jika Anda telah membaca buku ini secara seksama hingga sekarang dan praktek membuat banyak program, maka Anda sekarang seharusnya lebih nyaman dan familiar dengan Python. Anda mungkin sudah mmebuat beberapa program Python untuk percobaan dan melatih kemampuan Python Anda. Jika belum, mulailah sekarang. Pertanyaan berikutnya adalah 'Apa Berikutnya?'

Saya sarankan Anda coba geluti masalah ini:

> Buat program *buku-alamat* berbasis perintah di mana Anda dapat menelusuri, menambah, modifikasi,menghapus atau mencari kontak yang Anda miliki seperti teman, keluarga dan rekanan serta informasi detil mereka seperti alamat email atau nomor telepon. Detailnya harus disimpan agar bisa ditampilkan di kemudian hari.

Ini cukup mudah jika Anda memikirkannya dengan mempertimbangkan berbagai hal yang telah kita pelajari sebelumnya hingga sekarang. Jika Anda masih membutuhkan petunjuk bagaimana melakukannya, berikut beberapa petunjuk.

Petunjuk (Jangan baca ini sebelum Anda mencobanya)

:   Buat sebuah _class_ untuk merepresentasikan informasi dari seseorang. Gunakan pustaka untuk menyimpan obyek person ini, dengan menggunakan namanya sebagai kunci. Gunakan modul picke untuk menyimpan obyek secara persisten ke dalam ruang penyimpanan komputer Anda. Gunakan metode baku dari pustaka untuk menambah, menghapus dan mengubah informasi dari orang tersebut.

Sekai Anda bisa melakukan ini, Anda dapat menyebut diri Anda sebagai seorang programmer Python. Lalu kirim [surel ke saya](http://www.swaroopch.com/contact/) dan berterimakasihlah terhadap buku yang bagus ini ;-). Langkah ini tidak wajib, namun dianjurkan. Juga pertimbangkan untuk membeli [versi cetak](http://www.swaroopch.com/buybook/) untuk mendukung pengembangan buku ini.

Jika program di atas menurut Anda cukup mudah, ini contoh lain yang lebih sulit:

> Implementasikan [perintah ganti](http://unixhelp.ed.ac.uk/CGI/man-cgi?replace). Perintah ini akan mengganti satu string ke dalam string yang lain di dalam daftar berkas yang diberikan.

Perintah ganti dapat dibuat secara sederhana atau rumit sesuai dengan keinginan Anda, dari substitusi string sederhana hingga pencarian pola (ekspresi reguler)

Setelah itu, berikut beberapa petunjuk untuk perjalanan Anda bersama Python:

## Kode Contoh

Cara paling baik untuk belajar bahasa pemrograman adalah dengan menulis banyak kode dan membaca banyak kode:

- [Resep Masak Python](http://code.activestate.com/recipes/langs/python/) koleksi resep atau tips yang sangat bermanfaat untuk memecahkan masalah khusus dengan menggunakan Python. Buku ini wajib-baca untuk setiap pengguna Python.
- [Modul Mingguan Python](http://www.doughellmann.com/PyMOTW/contents.html) panduan yang sangat baik dan wajib dibaca untuk [Pustaka Standar Python](#pustaka-standar).

## Tanya Jawab 

- [Lakukan dan Jangan Lakukan di Python](http://docs.python.org/py3k/howto/doanddont.html)
- [Pertanyaan Resmi yang Sering Diajukan di Python](http://www.python.org/doc/faq/general/)
- [Daftar Pertanyaan yang Jarang Ditanyakan dari Norvig](http://norvig.com/python-iaq.html)
- [Interview Tanya Jawab Python](http://dev.fyicenter.com/Interview-Questions/Python/index.html)
- [Pertanyaan di StackOverflow dengan tagar Python](http://beta.stackoverflow.com/questions/tagged/python)

## Panduan 

- [Daftar lengkap tutorial Python dari Awaretek](http://www.awaretek.com/tutorials.html)

## Video 

- [PyVideo](http://www.pyvideo.org/category)

## Diskusi 

Jika Anda terhenti karena permasalahan Python, dan tidak ada tempat bertanya, [daftar tutor-python](http://mail.python.org/mailman/listinfo/tutor) adalah tempat yang tepat untuk bertanya.

Pastikan Anda sudah mengerjakan PR Anda dan mencoba menyelesaikan sendiri terlebih dahulu sebelum bertanya.

## Berita 

Jika ingin mengikuti berita-berita terkini dari dunia Python, silakan ikuti [Planet Python Resmi](http://planet.python.org).

## Menginstal Pustaka

Ada sangat banyak pustaka kode terbuka yang tersedia di [Indeks Paket Python](http://pypi.python.org/pypi) yang dapat Anda gunakan di program Anda.

Untuk menginstal dan menggunakan pustaka ini, Anda dapat gunakan [pip](http://www.pip-installer.org/en/latest/).

## Perangkat Lunak Grafis 

Misalnya Anda ingin membuat program grafis sendiri dengan menggunakan Python. Ini dapat dilakukan dengan memanfaatkan pustaka GUI (_Graphical User Interface_/Antarmuka Pengguna Grafis) yang bisa dilekatkan pada program Python Anda. Pelekatan ini memungkinkan Anda menulis program di Python dan menggunakan pustaka yang berdiri sendiri yang ditulis dalam bahasa C atau C++ atau bahasa lainnya.

Ada banyak pilihan menggunakan GUI di Python:

Kivy

:   <http://kivy.org>

PyGTK

:   Perangkat lunak ini merupakan lekatan Python terhadap GTK+ toolkit, yang merupakan fondasi dari antar muka GNOME. GTK+ memiliki banyak aturan main untuk bisa digunakan, namun sekali Anda merasa nyaman, Anda bisa membuat aplikasi GUI secara cepat. Aplikasi desainer antar muka Glade juga sangat bagus. Dokumentasi juga diperbaiki dari waktu ke waktu. GTK+ berjalan baik di Linux meskipun portingnya ke Windows masih belum selesai. Anda dapat membuat perangkat lunak baik bebas maupun komersial dengan menggunakan GTK+. Untuk memulai, silakan baca [Panduan PyGTK](http://www.pygtk.org/tutorial.html).

PyQt

:   This is the Python binding for the Qt toolkit which is the foundation upon which the KDE is built. Qt is extremely easy to use and very powerful especially due to the Qt Designer and the amazing Qt documentation. PyQt is free if you want to create open source (GPL'ed) software and you need to buy it if you want to create proprietary closed source software. Starting with Qt 4.5 you can use it to create non-GPL software as well. To get started, read the [PyQt tutorial](http://zetcode.com/tutorials/pyqt4/) or the [PyQt book](http://www.qtrac.eu/pyqtbook.html).

wxPython

:   This is the Python bindings for the wxWidgets toolkit. wxPython has a learning curve associated with it. However, it is very portable and runs on Linux, Windows, Mac and even embedded platforms. There are many IDEs available for wxPython which include GUI designers as well such as [SPE (Stani's Python Editor)](http://spe.pycs.net/) and the [wxGlade](http://wxglade.sourceforge.net/) GUI builder. You can create free as well as proprietary software using wxPython. To get started, read the [wxPython tutorial](http://zetcode.com/wxpython/).

### Summary of GUI Tools 

For more choices, see the [GuiProgramming wiki page at the official python website](http://www.python.org/cgi-bin/moinmoin/GuiProgramming).

Unfortunately, there is no one standard GUI tool for Python. I suggest that you choose one of the above tools depending on your situation. The first factor is whether you are willing to pay to use any of the GUI tools. The second factor is whether you want the program to run only on Windows or on Mac and Linux or all of them. The third factor, if Linux is a chosen platform, is whether you are a KDE or GNOME user on Linux.

For a more detailed and comprehensive analysis, see Page 26 of the [The Python Papers, Volume 3, Issue 1](http://archive.pythonpapers.org/ThePythonPapersVolume3Issue1.pdf).

## Various Implementations 

There are usually two parts a programming language - the language and the software. A language is *how* you write something. The software is *what* actually runs our programs.

We have been using the *CPython* software to run our programs. It is referred to as CPython because it is written in the C language and is the *Classical Python interpreter*.

There are also other software that can run your Python programs:

[Jython](http://www.jython.org)

:   A Python implementation that runs on the Java platform. This means you can use Java libraries and classes from within Python language and vice-versa.

[IronPython](http://www.codeplex.com/Wiki/View.aspx?ProjectName=IronPython)

:   A Python implementation that runs on the .NET platform. This means you can use .NET libraries and classes from within Python language and vice-versa.

[PyPy](http://codespeak.net/pypy/dist/pypy/doc/home.html)

:   A Python implementation written in Python! This is a research project to make it fast and easy to improve the interpreter since the interpreter itself is written in a dynamic language (as opposed to static languages such as C, Java or C# in the above three implementations)

[Stackless Python](http://www.stackless.com)

:   A Python implementation that is specialized for thread-based performance.

There are also others such as [CLPython](http://common-lisp.net/project/clpython/) - a Python implementation written in Common Lisp and [IronMonkey](http://wiki.mozilla.org/Tamarin:IronMonkey) which is a port of IronPython to work on top of a JavaScript interpreter which could mean that you can use Python (instead of JavaScript) to write your web-browser ("Ajax") programs.

Each of these implementations have their specialized areas where they are useful.

## Functional Programming (for advanced readers)

When you start writing larger programs, you should definitely learn more about a functional approach to programming as opposed to the class-based approach to programming that we learned in the [object-oriented programming chapter](#object-oriented-programming):

- [Functional Programming Howto by A.M. Kuchling](http://docs.python.org/dev/howto/functional.html)
- [Functional programming chapter in 'Dive Into Python' book](http://www.diveintopython.net/functional_programming/index.html)
- [Functional Programming with Python presentation](http://ua.pycon.org/static/talks/kachayev/index.html)

## Summary 

We have now come to the end of this book but, as they say, this is the *the beginning of the end*!. You are now an avid Python user and you are no doubt ready to solve many problems using Python. You can start automating your computer to do all kinds of previously unimaginable things or write your own games and much much more. So, get started!
