# Alur Kontrol 

Di dalam program yang kita lihat hingga saat ini, selalu saja ada beberapa urutan statemen yang dijalankan secara saklak oleh Python, berurutan dari atas ke bawah. Bagaimana jika Anda ingin mengubah bagaimana alur kerjanya? Sebagai contoh Anda ingin program untuk mengambil keputusan dan bertindak secara berbeda tergantung keputusan yang diambil. Sebagai contoh, misalnya mencetak 'Selamat Pagi' atau 'Selamat Sore' tergantung waktu yang ada saat itu?

Sebagaimana yang Anda sudah bisa tebak, ini dapat dilakukan lewat statemen alur kontrol. Ada tiga macam statemen alur kontrol di Python - `if`, `for` dan `while`.

## Statemen if

Statemen `if` digunakan untuk mengecek kondisi: jika kondisi *if* bernilai benar, maka kita akan menjalankan satu blok statemen (disebut *if-block*), selain itu diteruskan dengan statemen  *else* kita gunakan untuk memproses blok statemen yang lain (dinamakan *else-block*). Klausul *else* tersebut sifatnya tidak wajib.

Contoh (simpan dengan nama `if.py`):

~~~python
angka = 23
tebakan = int(input('Masukkan sebuah angka : '))

if tebakan == angka:
    print('Selamat Anda telah menebaknya') # Blok baru mulai di sini
    print('(Tapi tidak ada satu hadiahpun untuk Anda!)') # Blok baru berakhir di sini
elif tebakan < angka:
    print('Tidak, angkanya sedikit lebih besar lagi') # Blok lainnya 
    # Anda dapat melakukan apapun di blok ini ...
else:
    print('Tidak, angkanya lebih kecil lagi')
    # you must have guessed > number to reach here

print('Selesai')
# Statemen terakhir ini selalu dieksekusi, setelah statemen if tersebut dijalankan.
~~~

Keluaran:

~~~
$ python3 if.py
Masukkan sebuah angka : 50
Tidak, angkanya lebih kecil lagi 
Selesai

$ python3 if.py
Masukkan sebuah angka : 22 
Tidak, angkanya sedikit lebih besar lagi 
Selesai

$ python3 if.py
Masukkan sebuah angka : 23
Selamat, Anda telah menbaknya
(Tapi tidak ada satu hadiahpun untuk Anda!)
Selesai
~~~

Bagaimana Cara Kerjanya:

Dalam program ini, kita menebak dari pengguna dan mengeceknya dengan nomor yang kita punya. Di awal, kita sudah mengeset variabel `angka` ke dalam nilai integer yang kita inginkan, misalnya `23`. Lalu, kita gunakan tebakan dari pengguna lewat fungsi `input()`. Fungsi adalah bagian dari program yang dapat digunakan kembali. Kita akan membaca tentang hal ini di [bab berikutnya](#functions).

Kita memasukkan sebuah string ke dalam fungsi built-in bernama `input` yang akan mencetak di layar sesuai dengan masukan yang diketikkan oleh pengguna di layar. Sekali dimasukkan, dan pengguna menekan tombol `enter`, maka fungsi `input()` akan mengembalikan apapun yang dimasukkan oleh pengguna, sebagai sebuah string. Lalu kita mengkonversi string ini ke dalam integer dengan menggunakan `int` lalu menyimpannya ke dalam variabel bernama `tebakan`. Sebetulnya, `int` merupakan class, tapi yang Anda perlu tahu saat ini adalah Anda dapat menggunakannya untuk mengonversi sebuah string ke dalam integer (asumsikan string tersebut berisi integer yang valid di dalamnya).

Berikutnya, kita bandingkan tebakan dari pengguna dengan nomor yang telah kita tentukan sebelumnya. Jika mereka bernilai sama, kita tampilkan pesan berhasil. Perhatikan bahwa kita menggunakan level indentasi untuk memberitahu Python, statemen mana ikut ke dalam blok mana. Inilah mengapa indentasi sangat penting di Python. Saya harap Anda menggunakan aturan "indentasi yang konsisten". Betul kan?

Perhatikan bahwa jika statemen `if` berisi titik koma di akhir kalimat 0 kita mengindikasikan kepada Python bahwa blok statemen tersebut akan mengikuti.

Lalu kita cek lagi, apakah tebakan tersebut lebih kecil atau lebih besar dari angka yang kita tentukan, dan jika memang demikian kasusnya, kita informasikan kepada pengguna bahwa mereka harus menebak angka yang lebih tinggi daripada itu. Apa yang kita gunakan di sini adalah klausul `elif` yang sebenarnya bertugas untuk membandingkan dua statemen `if else-if else` yang berhubungan satu sama lain. Ini akan membuat program lebih mudah, dan mengurangi jumlah indentasi yang dibutuhkan.

Statemen `elif` dan `else` juga harus punya titik koma di akhir baris logis diikuti oleh blok statemen terkait (dengan indentasi yang benar tentu saja)

Anda dapat menambahkan statemen `if` yang lain di dalam blok statemen `if` dan seterusnya - ini dinamakan statemen `if` tergabung (nested).

Ingat bahwa bagian `elif` dan `else` sifatnya tidak wajib. Statemen `if` yang valid, minimal:

~~~python
if True:
    print('Yak, itu benar')
~~~

Setelah Python menyelesaikan eksekusi dan melengkapi statemen `if` termasuk klausul `elif` dan `else` terkait, maka statemen berikutnya adalah `print('Selesai')`. Setelah ini, Python akan melihat bahwa program sudah selesai dan berhenti.

Meskipun program ini sangat sederhana, Saya telah menunjukkan banyak hal yang harus Anda perhatikan. Semua ini sangat langsung (dan sangat mudah jika Anda memiliki latar belakang C/C++). Anda hanya perlu menyadari ini di depan, dan setelah praktek beberapa kali Anda akan merasa nyaman dengan itu, sehingga terasa 'natural' untuk Anda.

Catatan untuk programer C/C++

:   Tidak ada statemen `switch` di Python. Anda dapat menggunakan `if..elif..else` untuk melakukan hal yang sama (dalam beberapa kasus dapat menggunakan [dictionary](#dictionary) untuk mengerjakannya dengan cepat)

## Statemen While 

Statemen `while` memungkinkan Anda untuk mengeksekusi blok statemen berkali kali sepanjang kondisinya true. Statemen `while` adalah sebuah contoh terhadap apa yang dinamakan statemen *looping*. Statemen `while` dapat memiliki klausul opsional `else`.

Contoh (simpan dengan nama`while.py`):

~~~python
angka = 23
jalankan = True

while lari:
    tebak = int(input('Masukkan sebuah angka: '))
    if tebak == angka:
        print('Selamat, Anda telah menebaknya.')
        jalankan = False # ini akan menyebabkan loop while-nya berhenti
    elif tebak < angka:
        print('Tidak, sedikit lebih besar dari itu.')
    else:
        print('Tidak, sedikit lebih kecil dari itu.')
else:
    print('Loop while-nya telah selesai.')
    # Kerjakan hal lain yang Anda inginkan di sini.

print('Selesai')
~~~

Output:

~~~
$ python3 while.py
Masukkan sebuah angka: 50
Tidak, sedikit lebih kecil dari itu.
Masukkan sebuah angka: 22
Tidak, sedikit lebih besar dari itu.
Masukkan sebuah angka: 23
Selamat, Anda telah menebaknya.
Loop while-nya telah selesai.
Selesai
~~~

Bagaimana Cara Kerjanya:

Dalam program ini, kita masih bermain dengan program tebakan, tapi dibanding yang sebelumnya, dalam program ini pengguna dapat terus menebak hingga dia menebak secara benar - pengulangan program pada setiap tebakan tidak dibutuhkan, sebagaimana yang sudah kita kerjakan pada bagian sebelumnya. Ini secara jelas mendemonstrasikan bagaimana statemen `while` bekerja.

Kita pindahkan statemen `input` dan `if` ke dalam putaran `while` dan kita tentukan variabel bernama `jalankan` dengan nilai `True` sebelum putaran `while` di mulai. Pertama jalan, kita cek dulu apakah vaiabel `jalankan` bernilai `True` lalu lanjut mengeksekusi *while-block* terkait. Setelah blok ini dieksekusi, program akan mengecek kembali apakah nilai variabel `jalankan`. Jika nilainya masih `True`, maka while-block akan dieksekusi kembali, begitu seterusnya.

The `else` block is executed when the `while` loop condition becomes `False` - this may even be the first time that the condition is checked. If there is an `else` clause for a `while` loop, it is always executed unless you break out of the loop with a `break` statement.

The `True` and `False` are called Boolean types and you can consider them to be equivalent to the value `1` and `0`respectively.

Note for C/C++ Programmers

:   Remember that you can have an `else` clause for the `while` loop.

## The for loop 

The `for..in` statement is another looping statement which *iterates* over a sequence of objects i.e. go through each item in a sequence. We will see more about [sequences](#sequence) in detail in later chapters. What you need to know right now is that a sequence is just an ordered collection of items.

Example (save as `for.py`):

~~~python
for i in range(1, 5):
    print(i)
else:
    print('The for loop is over')
~~~

Output:

~~~
$ python3 for.py
1
2
3
4
The for loop is over
~~~

How It Works:

In this program, we are printing a *sequence* of numbers. We generate this sequence of numbers using the built-in `range` function.

What we do here is supply it two numbers and `range` returns a sequence of numbers starting from the first number and up to the second number. For example, `range(1,5)` gives the sequence `[1, 2, 3, 4]`. By default, `range` takes a step count of 1. If we supply a third number to `range`, then that becomes the step count. For example, `range(1,5,2)` gives `[1,3]`. Remember that the range extends *up to* the second number i.e. it does **not** include the second number.

Note that range() generates a sequence of numbers, but it will generate only one number at a time, when the for loop requests for the next item. If you want to see the full sequence of numbers immediately, use list(range()). Lists are explained in the [[data structures chapter](#data-structures)].

The `for` loop then iterates over this range - `for i in range(1,5)` is equivalent to `for i in [1, 2, 3, 4]` which is like assigning each number (or object) in the sequence to i, one at a time, and then executing the block of statements for each value of `i`.  In this case, we just print the value in the block of statements.

Remember that the `else` part is optional. When included, it is always executed once after the `for` loop is over unless a [break][#break) statement is encountered.

Remember that the `for..in` loop works for any sequence. Here, we have a list of numbers generated by the built-in `range` function, but in general we can use any kind of sequence of any kind of objects! We will explore this idea in detail in later chapters.

Note for C/C++/Java/C# Programmers

:   The Python `for` loop is radically different from the C/C++ `for` loop. C# programmers will note that the `for` loop in Python is similar to the `foreach` loop in C#. Java programmers will note that the same is similar to `for (int i : IntArray)` in Java 1.5 .

    In C/C++, if you want to write `for (int i = 0; i &lt; 5; i++)`, then in Python you write just `for i in range(0,5)`. As you can see, the `for` loop is simpler, more expressive and less error prone in Python.

## The break Statement

The `break` statement is used to *break* out of a loop statement i.e. stop the execution of a looping statement, even if the loop condition has not become `False` or the sequence of items has not been completely iterated over.

An important note is that if you *break* out of a `for`or `while` loop, any corresponding loop `else` block is **not** executed.

Example (save as `break.py`):

~~~python
while True:
    s = input('Enter something : ')
    if s == 'quit':
        break
    print('Length of the string is', len(s))
print('Done')
~~~

Output:

~~~
$ python3 break.py
Enter something : Programming is fun
Length of the string is 18
Enter something : When the work is done
Length of the string is 21
Enter something : if you wanna make your work also fun:
Length of the string is 37
Enter something :       use Python!
Length of the string is 12
Enter something : quit
Done
~~~

How It Works:

In this program, we repeatedly take the user's input and print the length of each input each time. We are providing a special condition to stop the program by checking if the user input is `'quit'`. We stop the program by *breaking* out of the loop and reach the end of the program.

The length of the input string can be found out using the built-in `len` function.

Remember that the `break` statement can be used with the `for` loop as well.

### Swaroop's Poetic Python

The input I have used here is a mini poem I have written called *Swaroop's Poetic Python*:

~~~
Programming is fun
When the work is done
if you wanna make your work also fun:
    use Python!
~~~

## The continue Statement 

The `continue` statement is used to tell Python to skip the rest of the statements in the current loop block and to *continue* to the next iteration of the loop.

Example (save as `continue.py`):

~~~python
while True:
    s = input('Enter something : ')
    if s == 'quit':
        break
    if len(s) < 3:
        print('Too small')
        continue
    print('Input is of sufficient length')
    # Do other kinds of processing here...
~~~

Output:

~~~
$ python3 continue.py
Enter something : a
Too small
Enter something : 12
Too small
Enter something : abc
Input is of sufficient length
Enter something : quit
~~~

How It Works:

In this program, we accept input from the user, but we process the input string only if it is at least 3 characters long. So, we use the built-in `len` function to get the length and if the length is less than 3, we skip the rest of the statements in the block by using the `continue` statement. Otherwise, the rest of the statements in the loop are executed, doing any kind of processing we want to do here.

Note that the `continue` statement works with the `for`loop as well.

## Summary 

We have seen how to use the three control flow statements - `if`, `while` and `for` along with their associated `break` and `continue` statements. These are some of the most commonly used parts of Python and hence, becoming comfortable with them is essential.

Next, we will see how to create and use functions.
