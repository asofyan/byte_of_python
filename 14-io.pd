# Masukan Keluaran 

Akan ada kondisi di mana program Anda harus berinteraksi dengan pengguna. Misalnya, Anda ingin mengambil masukan dari pengguna dan mencetak hasilnya. Kita dapat melakukan hal ini dengan menggunakan fungsi `input()` dan `print()` secara bersamaan. 

Untuk keluaran, kita juga bisa menggunakan berbagai macam metode klas `str` (string). Sebagai contoh, Anda dapat memanfaatkan metode `rjust` untuk menampilkan layar rata kanan dengan ukuran khusus. Lihat `help(str)` untuk informasi lebih detail.

Jenis masukan dan keluaran yang umum lainnya adalah dalam penggunaan berkas (_file_). Kemampuan untuk membuat, membaca dan menulis berkas sangat penting dalam sebuah program, dan kita akan mengeksplorasi aspek tersebut di bab ini.

## Masukan dari Pengguna 

Simpan program ini dengan nama `masukan_pengguna.py`:

~~~python
def putarbalik(teks):
    return text[::-1]

def ini_palindrom(teks):
    return text == putarbalik(teks)

sesuatu = input('Masukkan teks: ')
if (ini_palindrom(sesuatu)):
    print("Ya, ini palindrom")
else:
    print("Tidak, ini bukan palindrom")
~~~

Keluaran:

~~~
$ python3 masukan_pengguna.py
Masukkan teks: sir
Tidak, ini bukan palindrom

$ python3 masukan_pengguna.py
Masukkan teks: madam
Ya, ini palindrom

$ python3 masukan_pengguna.py
Masukkan teks: racecar
Ya, ini palindrom
~~~

Bagaimana Cara Kerjanya:

Kita menggunakan fitur pemotongan untuk membalikkan teks. Kita sudah pelajari sebelumnya tentang bagaimana cara membuat [potongan dari urutan](#sequence) dengan menggunakan `seq[a:b]` mulai dari posisi `a` hingga posisi `b`. Kita juga dapat memberikan argumen ketiga yang menentukan berapa banyak *langkah* yang diperlukan agar proses pemotongan selesai. Langkah bakunya adalah `1` yang akan memberikan hasil berurutan dari sebuah teks. Dengan memberi langkah negatif, seperti `-1` akan mengembalikan teks dalam urutan terbalik.

Fungsi `input()` mengambil argumen string dan menampilkannya langsung kepada pengguna. Kemudian ia menunggu pengguna mengetikkan sesuatu dan menekan tombol enter/return. Jika pengguna sudah memasukkan teks dan menekan tombol enter/return, fungsi `input()` akan mengmbalikan teks yang telah ditulis sebelumnya oleh pengguna.

Kemudian kita ambil teks tersebut dan kita balik. Jika teks asli dan teks balikannya sama, maka teks tersebut dikategorikan sebagai [palindrom]([http://en.wiktionary.org/wiki/palindrome).

Pekerjaan Rumah

:   Mengecek apakah sebuah teks palindrom atau bukan, juga harus mengabaikan tanda baca, spasi, dan huruf besar kecil. Misalnya "Rise to vote, sir." juga palindrom namun program yang kita buat sebelumnya tidak mengenalinya sebagai palindrom. Dapatkah Anda memperbaiki program di atas sehingga dapat mengenali teks palindrom tersebut?

    *Petunjuk (Jangan dibaca) di bawah*

    Gunakan tuple (Anda dapat temukan *seluruh* tanda baca di sini [tanda baca](http://grammar.ccc.commnet.edu/grammar/marks/marks.htm)) untuk tempat penyimpanan seluruh karakter yang tidak kita inginkan, kemudian kita gunakan tes keikutsertaan untuk memastikan apakah sebeuah karakter dihapus atau tidak, dengan kata lain dilarang = ('!', '?', '.', ...).

## Files 

You can open and use files for reading or writing by creating an object of the `file` class and using its `read`, `readline` or `write` methods appropriately to read from or write to the file. The ability to read or write to the file depends on the mode you have specified for the file opening. Then finally, when you are finished with the file, you call the `close` method to tell Python that we are done using the file.

Example (save as `using_file.py`):

~~~python
poem = '''\
Programming is fun
When the work is done
if you wanna make your work also fun:
    use Python!
'''
 
f = open('poem.txt', 'w') # open for 'w'riting
f.write(poem) # write text to file
f.close() # close the file
 
f = open('poem.txt') # if no mode is specified, 'r'ead mode is assumed by default
while True:
    line = f.readline()
    if len(line) == 0: # Zero length indicates EOF
        break
    print(line, end='')
f.close() # close the file
~~~

Output:

~~~
$ python3 using_file.py
Programming is fun
When the work is done
if you wanna make your work also fun:
        use Python!
~~~

How It Works:

First, open a file by using the built-in `open` function and specifying the name of the file and the mode in which we want to open the file. The mode can be a read mode (`'r'`), write mode (`'w'`) or append mode (`'a'`). We can also specify whether we are reading, writing, or appending in text mode (`'t'`) or binary mode (`'b'`). There are actually many more modes available and `help(open)` will give you more details about them. By default, `open()` considers the file to be a 't'ext file and opens it in 'r'ead mode.

In our example, we first open the file in write text mode and use the `write` method of the file object to write to the file and then we finally `close` the file.

Next, we open the same file again for reading. We don't need to specify a mode because 'read text file' is the default mode. We read in each line of the file using the `readline` method in a loop. This method returns a complete line including the newline character at the end of the line. When an *empty* string is returned, it means that we have reached the end of the file and we 'break' out of the loop.

By default, the `print()` function prints the text as well as an automatic newline to the screen. We are suppressing the newline by specifying `end=''` because the line that is read from the file already ends with a newline character. Then, we finally `close`the file.

Now, check the contents of the `poem.txt` file to confirm that the program has indeed written to and read from that file.

## Pickle

Python provides a standard module called `pickle` using which you can store **any** Python object in a file and then get it back later. This is called storing the object *persistently*.

Example (save as `pickling.py`):

~~~python
import pickle
 
# the name of the file where we will store the object
shoplistfile = 'shoplist.data'
# the list of things to buy 
shoplist = ['apple', 'mango', 'carrot']
 
# Write to the file
f = open(shoplistfile, 'wb')
pickle.dump(shoplist, f) # dump the object to a file
f.close()
 
del shoplist # destroy the shoplist variable
 
# Read back from the storage
f = open(shoplistfile, 'rb')
storedlist = pickle.load(f) # load the object from the file
print(storedlist)
~~~

Output:

~~~
$ python3 pickling.py
['apple', 'mango', 'carrot']
~~~

How It Works:

To store an object in a file, we have to first `open` the file in 'w'rite 'b'inary mode and then call the `dump` function of the`pickle` module. This process is called *pickling*.

Next, we retrieve the object using the `load` function of the `pickle` module which returns the object. This process is called *unpickling*.

## Summary 

We have discussed various types of input/output and also file handling and using the pickle module.

Next, we will explore the concept of exceptions.
