# Masukan Keluaran 

Akan ada kondisi di mana program Anda harus berinteraksi dengan pengguna. Misalnya, Anda ingin mengambil masukan dari pengguna dan mencetak hasilnya. Kita dapat melakukan hal ini dengan menggunakan fungsi `input()` dan `print()` secara bersamaan. 

Untuk keluaran, kita juga bisa menggunakan berbagai macam metode klas `str` (string). Sebagai contoh, Anda dapat memanfaatkan metode `rjust` untuk menampilkan layar rata kanan dengan ukuran khusus. Lihat `help(str)` untuk informasi lebih detail.

Jenis masukan dan keluaran yang umum lainnya adalah dalam penggunaan berkas (_file_). Kemampuan untuk membuat, membaca dan menulis berkas sangat penting dalam sebuah program, dan kita akan mengeksplorasi aspek tersebut di bab ini.

## Masukan dari Pengguna 

Simpan program ini dengan nama `masukan_pengguna.py`:

~~~python
def putarbalik(teks):
    return text[::-1]

def ini_palindrom(teks):
    return text == putarbalik(teks)

sesuatu = input('Masukkan teks: ')
if (ini_palindrom(sesuatu)):
    print("Ya, ini palindrom")
else:
    print("Tidak, ini bukan palindrom")
~~~

Keluaran:

~~~
$ python3 masukan_pengguna.py
Masukkan teks: sir
Tidak, ini bukan palindrom

$ python3 masukan_pengguna.py
Masukkan teks: madam
Ya, ini palindrom

$ python3 masukan_pengguna.py
Masukkan teks: racecar
Ya, ini palindrom
~~~

Bagaimana Cara Kerjanya:

Kita menggunakan fitur pemotongan untuk membalikkan teks. Kita sudah pelajari sebelumnya tentang bagaimana cara membuat [potongan dari urutan](#sequence) dengan menggunakan `seq[a:b]` mulai dari posisi `a` hingga posisi `b`. Kita juga dapat memberikan argumen ketiga yang menentukan berapa banyak *langkah* yang diperlukan agar proses pemotongan selesai. Langkah bakunya adalah `1` yang akan memberikan hasil berurutan dari sebuah teks. Dengan memberi langkah negatif, seperti `-1` akan mengembalikan teks dalam urutan terbalik.

Fungsi `input()` mengambil argumen string dan menampilkannya langsung kepada pengguna. Kemudian ia menunggu pengguna mengetikkan sesuatu dan menekan tombol enter/return. Jika pengguna sudah memasukkan teks dan menekan tombol enter/return, fungsi `input()` akan mengmbalikan teks yang telah ditulis sebelumnya oleh pengguna.

Kemudian kita ambil teks tersebut dan kita balik. Jika teks asli dan teks balikannya sama, maka teks tersebut dikategorikan sebagai [palindrom]([http://en.wiktionary.org/wiki/palindrome).

Pekerjaan Rumah

:   Mengecek apakah sebuah teks palindrom atau bukan, juga harus mengabaikan tanda baca, spasi, dan huruf besar kecil. Misalnya "Rise to vote, sir." juga palindrom namun program yang kita buat sebelumnya tidak mengenalinya sebagai palindrom. Dapatkah Anda memperbaiki program di atas sehingga dapat mengenali teks palindrom tersebut?

    *Petunjuk (Jangan dibaca) di bawah*

    Gunakan tuple (Anda dapat temukan *seluruh* tanda baca di sini [tanda baca](http://grammar.ccc.commnet.edu/grammar/marks/marks.htm)) untuk tempat penyimpanan seluruh karakter yang tidak kita inginkan, kemudian kita gunakan tes keikutsertaan untuk memastikan apakah sebeuah karakter dihapus atau tidak, dengan kata lain dilarang = ('!', '?', '.', ...).

## Berkas 

Anda dapat membaca atau menulis berkas dengan membuat objek dari kelas `file` dan menggunakan metode di dalamnya seperti `read`, `readline` atau `write` untuk membaca, membaca tiap baris, atau menulis ke dalam berkas tersebut. Kemampuan untuk membaca atau menulis sebuah berkas, tergantung mode yang Anda gunakan saat membuka sebuah berkas. Setelah menyelesaikan semua yang Anda inginkan pada berkas tersebut, Anda dapat memanggil metode `close` untuk memberitahu Python bahwa kita sudah selesai menggunakan berkas tersebut. 

Contoh (simpan sebagai `guna_berkas.py`):

~~~python
puisi = '''\
Programming menyenangkan
Saat pekerjaan terselesaikan
jika kamu ingin kerja menyenangkan:
    gunakan Python!
'''
 
f = open('puisi.txt', 'w') # membuka berkas dengan mode 'w' (writing/menulis)
f.write(puisi) # menulis teks ke dalam berkas
f.close() # menutup berkas 
 
f = open('puisi.txt') # jika tidak menentukan mode, diasumsikan secara baku dengan  mode 'r' (read/baca)
while True:
    line = f.readline()
    if len(line) == 0: # Panjang nol mengindikasikan EOF (_End Of File_/akhir berkas)
        break
    print(line, end='')
f.close() # tutup berkas
~~~

Keluaran:

~~~
$ python3 guna_berkas.py
Programming menyenangkan
Saat pekerjaan terselesaikan
jika kamu ingin kerja menyenangkan:
    gunakan Python!
~~~

Bagaimana Cara Kerjanya:

Pertama, buka berkas dengan fungsi `open` yang sudah ada, dan tentukan nama berkas beserta mode yang kita gunakan saat membuka berkas. Mode ini dapat berupa mode baca (_read_/`'r'`), mode tulis (_write_/`'w'`), atau mode sisip (_append_/`'a'`). Kita juga dapat tentukan saat membaca, menulis atau menyisipkan dalam mode teks (`'t'`) atau mode biner (`'b'`). Sebetulnya ada banyak mode tersedia, dan untuk melihatnya secara detail Anda cukup ketikkan `help(open)`. Secara baku, `open()` dibuka dalam format teks ('t') dan mode baca ('r').

Dalam contoh kita, berkas dibuka dalam mode tulis teks dengan mode `write`, lalu kita tutup berkas dengan mode `close`.

Berikutnya, kita buka lagi berkas yang sama untuk dibaca. Kita tidak perlu menentukan mode secara khusus sebba `membaca berkas teks` adalah mode baku. Lalu kita baca tiap baris yang ada di dalamnya dengan menggunakan metode `readline` dalam sebuah putaran. Metode ini akan mengembalikan satu beris penuh, termasuk karakter ganti baris di akhir baris. Saat string *kosong* dikembalikan, ini berarti kita sudah mencapai akhir berkas dan kita menghentikan ('break') putaran. 

Secara baku, fungsi `print()` juga akan mencetak teks di layar, termasuk otomatis pindah baris. Kita menghapus karakter baris baru yang ada di teks, dengan menambahkan `end=''` sebab baris yang dibaca dari berkas sendiri sudah memiliki karakter ganti baris. Tanpa ini akan mencetak ganti baris dua kali. Dan akhirnya, kita `menutup` berkas. 

Sekarang, periksa kembali isi dari `puisi.txt` untuk konfirmasi bahwa program sudah benar menulis dan membaca dari berkas tersebut. 

## Pickle

Python memberikan modul standar bernama `picke` di mana Anda dapat menyimpan objek **apa saja** ke dalam sebuah berkas, lalu memanfaatkannya kemudian. Ini dinamakan menyimpan objek secara *persisten*.

Contoh (simpan sebagai `pickling.py`):

~~~python
import pickle
 
# nama berkas tempat objek akan disimpan
berkasdaftarbelanja = 'daftarbelanja.data'
# barang-barang yang akan dibeli 
daftarbelanja = ['apel', 'mangga', 'wortel']
 
# Menulis ke dalam berkas 
f = open(berkasdaftarbelanja, 'wb')
pickle.dump(daftarbelanja, f) # buang objek ke dalam berkas 
f.close()
 
del daftarbelanja # hapus variabel daftarbelanja
 
# Baca kembali dari penyimpanan 
f = open(berkasdaftarbelanja, 'rb')
daftarsimpan = pickle.load(f) # muat objek dari berkas
print(daftarsimpan)
~~~

Keluaran:

~~~
$ python3 pickling.py
['apel', 'mangga', 'wortel']
~~~

Bagaimana Cara Kerjanya:

Untuk menyimpan objek ke dalam berkas, pertama kita harus `buka` berkas dalam mode `w` (tulis) dan `b` (format biner), kemudiapn panggil fungsi `dump` dari modul `pickle`. Proses ini dinamakan *pickling*.

Kemudian, kita ambil objek dengan menggunakan fungsi `load` dari modul `pickle` yang mengembalikan objek. Proses ini dinamakan *unpickling*.

## Ringkasan 

Kita telah mendiskusikan berbagai jenis input/output, penanganan berka dan modul pickle.

Berikutnya, kita akan jelajahi konsep eksepsi (_excpetions_).
